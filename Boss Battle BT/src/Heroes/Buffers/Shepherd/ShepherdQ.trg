{
  "Id": 50333064,
  "Comment": "",
  "IsScript": true,
  "RunOnMapInit": false,
  "Script": "scope ShepherdQ initializer init\r\n\r\n    globals\r\n            private constant integer ID_ABILITY = 'A1DR'\r\n            private constant integer ID_BUFF_DUMMY = 'A1DT'\r\n            private constant integer ID_BUFF = 'B0AF'\r\n            private constant integer ID_ABILITY_GHOST = 'A1DU'\r\n            private constant string ID_HASH_END_TIMER = \"journey_end_timer\"\r\n            private constant string ID_HASH_END_TIMER_TARGET = \"journey_end_timer_target\"\r\n            private constant string ID_HASH_PULSE_TIMER = \"journey_pulse_timer\"\r\n            private constant string ID_HASH_PULSE_TIMER_TARGET = \"journey_pulse_timer_target\"\r\n            private constant string ID_HASH_PULSE_TIMER_ORIGIN = \"journey_pulse_timer_origin\"\r\n            private constant string ID_HASH_AP = \"journey_attack_power\"\r\n            private constant string ID_HASH_MG = \"journey_mana_gain\"\r\n            private constant string ID_HASH_LAST_TARGET = \"journey_last_target\"\r\n            private constant string MANA_EFFECT = \"Abilities\\\\Spells\\\\Undead\\\\ReplenishMana\\\\ReplenishManaCaster.mdl\"\r\n            private constant real BASE_DURATION = 15\r\n            private constant real DURATION_PER_LVL = 0\r\n            private constant integer BASE_DAMAGE_BOOST = 5\r\n            private constant integer DAMAGE_BOOST_PER_LVL = 5\r\n            private constant integer BASE_MANA_GAIN = 15\r\n            private constant integer MANA_GAIN_PER_LVL = 5\r\n            private group g = CreateGroup()\r\n            private unit buffed_one = null\r\n    endglobals\r\n    \r\n    function Trig_ShepherdQ_Conditions takes nothing returns boolean\r\n        return GetSpellAbilityId() == ID_ABILITY and combat( GetSpellAbilityUnit(), true, GetSpellAbilityId() )\r\n    endfunction\r\n\r\n    private function does_not_have_buff takes nothing returns boolean\r\n        local unit filtered = GetFilterUnit()\r\n        local boolean b = not( UnitHasBuffBJ( filtered, ID_BUFF ) ) and ( unitst( filtered, buffed_one, \"ally\" ) and not( IsUnitType( filtered, UNIT_TYPE_STRUCTURE ) ) )\r\n        set filtered = null\r\n        return b\r\n    endfunction\r\n\r\n    private function has_buff takes nothing returns boolean\r\n        local unit filtered = GetFilterUnit()\r\n        local boolean b = UnitHasBuffBJ( filtered, ID_BUFF ) and ( unitst( filtered, buffed_one, \"ally\" ) and not( IsUnitType( filtered, UNIT_TYPE_STRUCTURE ) ) )\r\n        set filtered = null\r\n        return b\r\n    endfunction\r\n\r\n    function ShepherdQPulse takes nothing returns nothing\r\n        local unit u\r\n        local integer id = GetHandleId( GetExpiredTimer() )\r\n        local unit pulse_target = LoadUnitHandle( udg_hash, id, StringHash( ID_HASH_PULSE_TIMER_TARGET ) )\r\n        local unit pulse_origin = LoadUnitHandle( udg_hash, id, StringHash( ID_HASH_PULSE_TIMER_ORIGIN ) )\r\n        local integer ap = LoadInteger( udg_hash, GetHandleId( pulse_target ), StringHash( ID_HASH_AP ) )\r\n        local real mg = I2R( LoadInteger( udg_hash, GetHandleId( pulse_target ), StringHash( ID_HASH_MG ) ) )\r\n        \r\n        set buffed_one = pulse_target\r\n        call GroupEnumUnitsInRange( g, GetUnitX(pulse_target), GetUnitY(pulse_target), 180, Condition(function does_not_have_buff) )\r\n        set buffed_one = null\r\n        loop\r\n            set u = FirstOfGroup(g)\r\n            exitwhen u == null\r\n            //\r\n                if IsUnitType(u, UNIT_TYPE_HERO) then\r\n                    call manast( pulse_origin, u, mg )\r\n                    call spectimeunit( u, MANA_EFFECT, \"origin\", 2 )\r\n                endif\r\n                call BlzSetUnitBaseDamage( u, BlzGetUnitBaseDamage(u, 0) + ap, 0 )\r\n                call SaveInteger( udg_hash, GetHandleId( u ), StringHash( ID_HASH_AP ), ap )\r\n                call UnitAddAbility( u, ID_BUFF_DUMMY )\r\n                call UnitAddAbility( u, ID_ABILITY_GHOST )\r\n            //\r\n            call GroupRemoveUnit(g,u)\r\n            set u = FirstOfGroup(g)\r\n        endloop\r\n\r\n        set pulse_target = null\r\n        set pulse_origin = null\r\n    endfunction\r\n\r\n    function ShepherdQCancel takes unit target returns nothing\r\n        local integer ap\r\n        local unit u\r\n    \r\n        // Cancel old timers\r\n        call RemoveSavedHandle(udg_hash, GetHandleId( target ), StringHash( ID_HASH_LAST_TARGET ) )\r\n        call DestroyTimer( LoadTimerHandle( udg_hash, GetHandleId( target ), StringHash( ID_HASH_END_TIMER ) ) )\r\n        call DestroyTimer( LoadTimerHandle( udg_hash, GetHandleId( target ), StringHash( ID_HASH_PULSE_TIMER ) ) )            \r\n        call RemoveSavedHandle(udg_hash, GetHandleId( target ), StringHash( ID_HASH_END_TIMER ) )\r\n        call RemoveSavedHandle(udg_hash, GetHandleId( target ), StringHash( ID_HASH_PULSE_TIMER ) )\r\n        call FlushChildHashtable( udg_hash, StringHash( ID_HASH_END_TIMER ) )\r\n        call FlushChildHashtable( udg_hash, StringHash( ID_HASH_PULSE_TIMER ) )\r\n        // Remove buffs and abilities\r\n        call RemoveSavedInteger( udg_hash, GetHandleId( target ), StringHash( ID_HASH_MG ) )\r\n        set buffed_one = target\r\n        call GroupEnumUnitsInRect( g, GetEntireMapRect(), Condition(function has_buff) )\r\n        set buffed_one = null\r\n        loop\r\n            set u = FirstOfGroup(g)\r\n            exitwhen u == null\r\n            //\r\n                call UnitRemoveAbility(u, ID_BUFF_DUMMY)\r\n                call UnitRemoveAbility(u, ID_ABILITY_GHOST)\r\n                call UnitRemoveBuffBJ(ID_BUFF, u)\r\n                set ap = LoadInteger( udg_hash, GetHandleId( u ), StringHash( ID_HASH_AP ))\r\n                if ap > 0 then\r\n                    call BlzSetUnitBaseDamage( u, BlzGetUnitBaseDamage(u, 0) - ap, 0 )\r\n                    call RemoveSavedInteger( udg_hash, GetHandleId( u ), StringHash( ID_HASH_AP ) )\r\n                endif\r\n            //\r\n            call GroupRemoveUnit(g,u)\r\n            set u = FirstOfGroup(g)\r\n        endloop\r\n    endfunction\r\n\r\n    function ShepherdQEnd takes nothing returns nothing\r\n        local integer id = GetHandleId( GetExpiredTimer( ) )\r\n        local unit caster = LoadUnitHandle( udg_hash, id, StringHash( ID_HASH_END_TIMER_TARGET ) )\r\n\r\n        call ShepherdQCancel( caster )\r\n        \r\n        set caster = null\r\n    endfunction\r\n\r\n    function Trig_ShepherdQ_Actions takes nothing returns nothing\r\n        local integer id\r\n        local integer mg\r\n        local integer ap\r\n        local unit caster\r\n        local unit last_target\r\n        local unit target\r\n        local integer lvl\r\n        local real t\r\n        \r\n        if CastLogic() then\r\n            set caster = udg_Caster\r\n            set target = udg_Target\r\n            set lvl = udg_Level\r\n            set t = udg_Time\r\n        elseif RandomLogic() then\r\n            set caster = udg_Caster\r\n            set target = randomtarget( caster, 800, \"ally\", \"hero\", \"\", \"\", \"\" )\r\n            set lvl = udg_Level\r\n            call textst( udg_string[0] + GetObjectName('A04K'), caster, 64, 90, 10, 1.5 )\r\n            set t = BASE_DURATION + ( DURATION_PER_LVL * lvl )\r\n            if target == null then\r\n                set caster = null\r\n                return\r\n            endif\r\n        else\r\n            set caster = GetSpellAbilityUnit()\r\n            set target = GetSpellTargetUnit()\r\n            set lvl = GetUnitAbilityLevel(GetSpellAbilityUnit(), GetSpellAbilityId())\r\n            set t = BASE_DURATION + ( DURATION_PER_LVL * lvl )\r\n        endif\r\n        \r\n        set last_target = LoadUnitHandle( udg_hash, GetHandleId( caster ), StringHash( ID_HASH_LAST_TARGET ) ) \r\n        //If active on another unit\r\n        if not( last_target == target ) and not( last_target == null ) then\r\n            call ShepherdQCancel(last_target)\r\n        endif\r\n        if last_target == target then\r\n            // Reset targets attack power bonus\r\n            set ap = LoadInteger( udg_hash, GetHandleId( target ), StringHash( ID_HASH_AP ))\r\n            if ap > 0 then\r\n                call BlzSetUnitBaseDamage( target, BlzGetUnitBaseDamage(target, 0) - ap, 0 )\r\n                call SaveInteger( udg_hash, GetHandleId( target ), StringHash( ID_HASH_AP ), 0)\r\n            endif\r\n            // Cancel old timers\r\n            call RemoveSavedHandle(udg_hash, GetHandleId( caster ), StringHash( ID_HASH_LAST_TARGET ) )\r\n            call DestroyTimer( LoadTimerHandle( udg_hash, GetHandleId( last_target ), StringHash( ID_HASH_END_TIMER ) ) )\r\n            call DestroyTimer( LoadTimerHandle( udg_hash, GetHandleId( last_target ), StringHash( ID_HASH_PULSE_TIMER ) ) )            \r\n            call RemoveSavedHandle(udg_hash, GetHandleId( last_target ), StringHash( ID_HASH_END_TIMER ) )\r\n            call RemoveSavedHandle(udg_hash, GetHandleId( last_target ), StringHash( ID_HASH_PULSE_TIMER ) )\r\n            call FlushChildHashtable( udg_hash, StringHash( ID_HASH_END_TIMER ) )\r\n            call FlushChildHashtable( udg_hash, StringHash( ID_HASH_PULSE_TIMER ) )\r\n        endif\r\n        call SaveUnitHandle( udg_hash, GetHandleId( caster ), StringHash( ID_HASH_LAST_TARGET ), target )\r\n\r\n        \r\n        \r\n        set t = timebonus( caster, t)\r\n        set ap = BASE_DAMAGE_BOOST + (DAMAGE_BOOST_PER_LVL*lvl)\r\n        set mg = BASE_MANA_GAIN + (MANA_GAIN_PER_LVL*lvl)\r\n        \r\n        call UnitAddAbility( target, ID_BUFF_DUMMY )\r\n        call UnitAddAbility( target, ID_ABILITY_GHOST )\r\n        call BlzSetUnitBaseDamage( target, BlzGetUnitBaseDamage(target, 0) + ap, 0 )\r\n        call SaveInteger( udg_hash, GetHandleId( target ), StringHash( ID_HASH_AP ), ap )\r\n        call SaveInteger( udg_hash, GetHandleId( target ), StringHash( ID_HASH_MG ), mg )\r\n        if LoadTimerHandle( udg_hash, GetHandleId( target ), StringHash( ID_HASH_END_TIMER ) ) == null  then\r\n            call SaveTimerHandle( udg_hash, GetHandleId( target ), StringHash( ID_HASH_END_TIMER ), CreateTimer() )\r\n        endif\r\n        set id = GetHandleId( LoadTimerHandle(udg_hash, GetHandleId( target ), StringHash( ID_HASH_END_TIMER ) ) )\r\n        call SaveUnitHandle( udg_hash, id, StringHash( ID_HASH_END_TIMER_TARGET ), target )\r\n        call TimerStart( LoadTimerHandle( udg_hash, GetHandleId( target ), StringHash( ID_HASH_END_TIMER ) ), t, false, function ShepherdQEnd )\r\n        \r\n        if LoadTimerHandle( udg_hash, GetHandleId( target ), StringHash( ID_HASH_PULSE_TIMER ) ) == null  then\r\n            call SaveTimerHandle( udg_hash, GetHandleId( target ), StringHash( ID_HASH_PULSE_TIMER ), CreateTimer() )\r\n        endif\r\n        set id = GetHandleId( LoadTimerHandle(udg_hash, GetHandleId( target ), StringHash( ID_HASH_PULSE_TIMER ) ) )\r\n        call SaveUnitHandle( udg_hash, id, StringHash( ID_HASH_PULSE_TIMER_TARGET ), target )\r\n        call SaveUnitHandle( udg_hash, id, StringHash( ID_HASH_PULSE_TIMER_ORIGIN ), caster )\r\n        call TimerStart( LoadTimerHandle( udg_hash, GetHandleId( target ), StringHash( ID_HASH_PULSE_TIMER ) ), 0.2, true, function ShepherdQPulse )\r\n        \r\n        set caster = null\r\n        set target = null\r\n        set last_target = null\r\n    endfunction\r\n\r\n    //===========================================================================\r\n    private function init takes nothing returns nothing\r\n        set gg_trg_ShepherdQ = CreateTrigger( )\r\n        call TriggerRegisterAnyUnitEventBJ( gg_trg_ShepherdQ, EVENT_PLAYER_UNIT_SPELL_EFFECT )\r\n        call TriggerAddCondition( gg_trg_ShepherdQ, Condition( function Trig_ShepherdQ_Conditions ) )\r\n        call TriggerAddAction( gg_trg_ShepherdQ, function Trig_ShepherdQ_Actions )\r\n    endfunction\r\n    \r\nendscope",
  "Events": [],
  "LocalVariables": [],
  "Conditions": [],
  "Actions": []
}