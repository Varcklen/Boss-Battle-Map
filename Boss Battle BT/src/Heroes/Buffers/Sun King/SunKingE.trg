{
  "Id": 50332978,
  "Comment": "",
  "IsScript": true,
  "RunOnMapInit": false,
  "Script": "scope SunKingE initializer init\r\n\r\n    globals \r\n        private constant integer ID_ABILITY = 'A0GQ'\r\n    \r\n        private constant integer BONUS_FIRST_LEVEL = 4\r\n        private constant integer BONUS_LEVEL_BONUS = 4\r\n        \r\n        private constant integer COUNT_FIRST_LEVEL = 1900\r\n        private constant integer COUNT_LEVEL_BONUS = -100\r\n        \r\n        private constant integer MOON_DURATION = 6\r\n        \r\n        private constant string ANIMATION = \"Abilities\\\\Spells\\\\NightElf\\\\Starfall\\\\StarfallCaster.mdl\"\r\n    endglobals\r\n\r\n    private function SunKingMoonBonus takes unit hero returns real\r\n        local real bonus = 0.01 * ( BONUS_FIRST_LEVEL + ( BONUS_LEVEL_BONUS * GetUnitAbilityLevel( hero, ID_ABILITY) ) )\r\n        \r\n        if Moon_Counter > 0 then\r\n            set bonus = bonus * 2\r\n        endif\r\n        \r\n        set hero = null\r\n        return bonus\r\n    endfunction\r\n\r\n    function Trig_SunKingE_Conditions takes nothing returns boolean\r\n        return GetLearnedSkill() == ID_ABILITY\r\n    endfunction\r\n\r\n    function Trig_SunKingE_Actions takes nothing returns nothing\r\n        local unit hero = GetLearningUnit()\r\n        local integer lvl = GetUnitAbilityLevel(hero, GetLearnedSkill())\r\n        \r\n        call SaveReal(udg_hash, GetHandleId(hero), StringHash( \"snke\" ), COUNT_FIRST_LEVEL + (COUNT_LEVEL_BONUS*lvl) )\r\n        if lvl == 1 then\r\n            call spdst( hero, BONUS_FIRST_LEVEL )\r\n        endif\r\n        call spdst( hero, BONUS_LEVEL_BONUS )\r\n        \r\n        if Moon_Counter > 0 then\r\n            if lvl == 1 then\r\n                call spdst( hero, BONUS_FIRST_LEVEL )\r\n            endif\r\n            call spdst( hero, BONUS_LEVEL_BONUS )\r\n        endif\r\n        \r\n        set hero = null\r\n    endfunction\r\n    \r\n    private function NullingAbility_Conditions takes nothing returns boolean\r\n        return GetUnitAbilityLevel( udg_Event_NullingAbility_Unit, ID_ABILITY) > 0\r\n    endfunction\r\n\r\n    private function NullingAbility takes nothing returns nothing\r\n        local unit hero = udg_Event_NullingAbility_Unit\r\n        local integer lvl = GetUnitAbilityLevel( hero, ID_ABILITY)\r\n        local integer bonus = BONUS_FIRST_LEVEL+(BONUS_LEVEL_BONUS*lvl)\r\n        \r\n        call spdst( hero, -bonus )\r\n        if Moon_Counter > 0 then\r\n            call spdst( hero, -bonus )\r\n        endif\r\n\r\n        set hero = null\r\n    endfunction\r\n    \r\n    private function MoonChange_Conditions takes nothing returns boolean\r\n        return GetUnitAbilityLevel( Event_MoonChange_Unit, ID_ABILITY) > 0\r\n    endfunction\r\n    \r\n    private function MoonChange takes nothing returns nothing\r\n        local unit hero = Event_MoonChange_Unit\r\n        local integer lvl = GetUnitAbilityLevel( hero, ID_ABILITY)\r\n        local integer bonus = BONUS_FIRST_LEVEL+(BONUS_LEVEL_BONUS*lvl)\r\n        \r\n        if Event_MoonChange_isNight then\r\n            call spdst( hero, bonus )\r\n        else\r\n            call spdst( hero, -bonus )\r\n        endif\r\n\r\n        set hero = null\r\n    endfunction\r\n    \r\n    private function MoonEnd takes nothing returns nothing\r\n        call moonst( -1 )\r\n    endfunction\r\n    \r\n    private function UseMoon takes unit caster returns nothing\r\n        call moonst( 1 )\r\n        call spectime( ANIMATION, GetUnitX(caster), GetUnitY(caster), MOON_DURATION )\r\n        call TimerStart( CreateTimer(), MOON_DURATION, false, function MoonEnd )\r\n    \r\n        set caster = null\r\n    endfunction\r\n    \r\n    private function CountUsed takes unit caster, real addCount returns nothing\r\n        local integer casterId = GetHandleId(caster)\r\n        local real count = LoadReal(udg_hash, casterId, StringHash( \"snke\" ) )\r\n        local real countCurrent = LoadReal(udg_hash, casterId, StringHash( \"snkec\" ) )\r\n        \r\n        set countCurrent = countCurrent + addCount\r\n        if countCurrent >= count then\r\n            set countCurrent = countCurrent - count\r\n            call UseMoon(caster)\r\n        endif\r\n        call SaveReal(udg_hash, casterId, StringHash( \"snkec\" ), countCurrent )\r\n    \r\n        set caster = null\r\n    endfunction\r\n    \r\n    \r\n    private function OnHealChange_Conditions takes nothing returns boolean\r\n        return GetUnitAbilityLevel( Event_OnHealChange_Caster, ID_ABILITY) > 0\r\n    endfunction\r\n    \r\n    private function OnHealChange takes nothing returns nothing\r\n        set Event_OnHealChange_Heal = Event_OnHealChange_Heal + ( Event_OnHealChange_StaticHeal * SunKingMoonBonus(Event_OnHealChange_Caster))\r\n    endfunction\r\n    \r\n    private function OnDamageChange_Conditions takes nothing returns boolean\r\n        return GetUnitAbilityLevel( udg_DamageEventSource, ID_ABILITY) > 0\r\n    endfunction\r\n    \r\n    private function OnDamageChange takes nothing returns nothing\r\n        set udg_DamageEventAmount = udg_DamageEventAmount + ( Event_OnDamageChange_StaticDamage * SunKingMoonBonus(udg_DamageEventSource))\r\n    endfunction\r\n    \r\n    \r\n    private function AfterHeal_Conditions takes nothing returns boolean\r\n        return IsUnitHasAbility( Event_AfterHeal_Caster, ID_ABILITY) and combat(Event_AfterHeal_Caster, false, 0) and Event_AfterHeal_Heal > 0\r\n    endfunction\r\n    \r\n    private function AfterHeal takes nothing returns nothing\r\n        call CountUsed( Event_AfterHeal_Caster, Event_AfterHeal_Heal )\r\n    endfunction\r\n    \r\n    private function AfterDamageEvent_Conditions takes nothing returns boolean\r\n        return IsUnitHasAbility( udg_DamageEventSource, ID_ABILITY) and combat(udg_DamageEventSource, false, 0) and udg_DamageEventAmount > 0\r\n    endfunction\r\n    \r\n    private function AfterDamageEvent takes nothing returns nothing\r\n        call CountUsed( udg_DamageEventSource, udg_DamageEventAmount )\r\n    endfunction\r\n\r\n    //===========================================================================\r\n    private function init takes nothing returns nothing\r\n        set gg_trg_SunKingE = CreateTrigger()\r\n        call TriggerRegisterAnyUnitEventBJ( gg_trg_SunKingE, EVENT_PLAYER_HERO_SKILL )\r\n        call TriggerAddCondition( gg_trg_SunKingE, Condition( function Trig_SunKingE_Conditions ) )\r\n        call TriggerAddAction( gg_trg_SunKingE, function Trig_SunKingE_Actions )\r\n        \r\n        call CreateEventTrigger( \"Event_MoonChange_Real\", function MoonChange, function MoonChange_Conditions )\r\n        call CreateEventTrigger( \"udg_Event_NullingAbility_Real\", function NullingAbility, function NullingAbility_Conditions )\r\n        \r\n        call CreateEventTrigger( \"Event_OnDamageChange_Real\", function OnDamageChange, function OnDamageChange_Conditions )\r\n        call CreateEventTrigger( \"Event_OnHealChange_Real\", function OnHealChange, function OnHealChange_Conditions )\r\n        \r\n        call CreateEventTrigger( \"udg_AfterDamageEvent\", function AfterDamageEvent, function AfterDamageEvent_Conditions )\r\n        call CreateEventTrigger( \"Event_AfterHeal_Real\", function AfterHeal, function AfterHeal_Conditions )\r\n    endfunction\r\n\r\nendscope\r\n",
  "Events": [],
  "LocalVariables": [],
  "Conditions": [],
  "Actions": []
}