{
  "Id": 50332975,
  "Comment": "",
  "IsScript": true,
  "RunOnMapInit": false,
  "Script": "scope SunKingQ initializer init\r\n\r\n    globals\r\n        private constant integer ID_ABILITY = 'A1DG'\r\n        \r\n        private constant integer STEP_SIZE = 150\r\n        private constant integer DISTANCE = 800\r\n        private constant integer DURATION = 5\r\n        \r\n        private constant real TICK = 0.04\r\n        private constant real DAMAGE_TICK = 0.4\r\n        private constant real ANIMATION_TICK = 1.2\r\n        private constant real BONUS_TURN_RATE = 0.01//-0.95\r\n        \r\n        private constant integer DAMAGE_FIRST_LEVEL = 8\r\n        private constant integer DAMAGE_LEVEL_BONUS = 4\r\n        \r\n        private constant integer SHIELD_FIRST_LEVEL = 150\r\n        private constant integer SHIELD_LEVEL_BONUS = 50\r\n        \r\n        private constant integer EFFECT = 'A1DH'\r\n        private constant integer BUFF = 'B0AC'\r\n        \r\n        private constant string BEAM_END_ANIMATION = \"Abilities\\\\Spells\\\\Human\\\\ManaFlare\\\\ManaFlareBase.mdl\"\r\n        private constant string ANIMATION = \"Heal.mdx\"\r\n        private constant string LIGHTNING = \"HWPB\"\r\n    endglobals\r\n\r\n    function Trig_SunKingQ_Conditions takes nothing returns boolean\r\n        return GetSpellAbilityId() == ID_ABILITY\r\n    endfunction\r\n    \r\n    private function BeamDamage takes unit caster, group units, integer id returns boolean\r\n        local real damage = LoadReal(udg_hash, id, StringHash( \"snkqd\" ) )\r\n        local real heal = LoadReal(udg_hash, id, StringHash( \"snkqh\" ) )\r\n        local unit u\r\n        local boolean affected = false\r\n        \r\n        loop\r\n            set u = FirstOfGroup(units)\r\n            exitwhen u == null\r\n            if unitst( u, caster, \"ally\" ) then\r\n                call healst(caster, u, heal)\r\n                if IsUnitHealthIsFull(u) == false then\r\n                    //call PlaySpecialEffect(ANIMATION, u)\r\n                    set affected = true\r\n                endif\r\n            else\r\n                call UnitTakeDamage(caster, u, damage, DAMAGE_TYPE_MAGIC)\r\n                //call PlaySpecialEffect(ANIMATION, u)\r\n                set affected = true\r\n            endif\r\n            call GroupRemoveUnit(units,u)\r\n        endloop\r\n    \r\n        set u = null\r\n        set units = null\r\n        set caster = null\r\n        return affected\r\n    endfunction\r\n    \r\n    private function AddToGroup takes unit caster, group units, group unitCheck, real x, real y returns nothing\r\n        local group g = CreateGroup()\r\n        local unit u\r\n        \r\n        call GroupEnumUnitsInRange( g, x, y, STEP_SIZE*2, null )\r\n        loop\r\n            set u = FirstOfGroup(g)\r\n            exitwhen u == null\r\n            if unitst( u, caster, \"all\" ) and IsUnitInGroup( u, unitCheck ) == false then\r\n                call GroupAddUnit( units, u )\r\n                call GroupAddUnit( unitCheck, u )\r\n            endif\r\n            call GroupRemoveUnit(g,u)\r\n        endloop\r\n    \r\n        call DestroyGroup( g )\r\n        set u = null\r\n        set g = null\r\n        set units = null\r\n        set unitCheck = null\r\n        set caster = null\r\n    endfunction\r\n    \r\n    private function MoveBeam takes unit caster, lightning beam, integer id returns nothing\r\n        local real tick = LoadReal(udg_hash, id, StringHash( \"snkqt\" ) ) + TICK\r\n        local real animtick = LoadReal(udg_hash, id, StringHash( \"snkqta\" ) ) + TICK\r\n        local effect beamEnd = LoadEffectHandle(udg_hash, id, StringHash( \"snkqe\" ) )\r\n        local group units = CreateGroup()\r\n        local group unitCheck = CreateGroup()\r\n        local location newPoint = null\r\n        local location oldPoint = null\r\n        local location casterPoint = null\r\n        local location targetPoint = null\r\n        local real angle\r\n        local integer i\r\n        local integer iEnd\r\n        local boolean affected\r\n        local boolean animationEnabled = false\r\n        \r\n        set casterPoint = Location(GetUnitX( caster ), GetUnitY( caster ))\r\n        \r\n        set angle = GetUnitFacing(caster)\r\n        set targetPoint = PolarProjectionBJ(casterPoint, DISTANCE, angle)\r\n        //call targetPoint.SetFromPoint( GetMovedPointByPoint( casterPoint, angle, DISTANCE) )\r\n        \r\n        //call MoveLocation(casterPoint, GetUnitX( caster ), GetUnitY( caster ))\r\n        //call casterPoint.Set(GetUnitX( caster ), GetUnitY( caster ))\r\n        call MoveLightningLoc( beam, casterPoint, targetPoint )\r\n        \r\n        call BlzSetSpecialEffectPositionLoc( beamEnd, targetPoint )\r\n        //call BlzSetSpecialEffectY( beamEnd, targetPoint.y )\r\n\r\n        //call newPoint.SetFromPoint(casterPoint)\r\n        set newPoint = casterPoint\r\n        \r\n        if tick >= DAMAGE_TICK then\r\n        \tset tick = tick - DAMAGE_TICK\r\n        \t\r\n        \tif animtick >= ANIMATION_TICK then\r\n        \t\tset animtick = animtick - ANIMATION_TICK\r\n        \t\tset animationEnabled = true\r\n        \tendif\r\n        \t\r\n\t        set i = 1\r\n\t        set iEnd = R2I(DISTANCE/STEP_SIZE) + 1\r\n\t        loop\r\n\t            exitwhen i > iEnd\r\n\t            set oldPoint = newPoint\r\n\t            set newPoint = PolarProjectionBJ( newPoint, STEP_SIZE, angle)//GetMovedPointByPoint( newPoint, angle, STEP_SIZE )\r\n\t            call AddToGroup( caster, units, unitCheck, GetLocationX(newPoint), GetLocationY(newPoint))\r\n\t            set affected = BeamDamage(caster, units, id)\r\n\t            if affected and animationEnabled then\r\n\t            \tcall DestroyEffect( AddSpecialEffectLoc( ANIMATION, newPoint ) )\r\n            \tendif\r\n            \tcall RemoveLocation(oldPoint)\r\n\t            set i = i + 1\r\n\t        endloop\r\n        endif\r\n        call SaveReal(udg_hash, id, StringHash( \"snkqt\" ), tick )\r\n        call SaveReal(udg_hash, id, StringHash( \"snkqta\" ), animtick )\r\n    \r\n        call RemoveLocation(newPoint)\r\n        call RemoveLocation(casterPoint)\r\n        call RemoveLocation(targetPoint)\r\n        call DestroyGroup( units )\r\n        call DestroyGroup( unitCheck )\r\n        set targetPoint = null\r\n        set oldPoint = null\r\n        set newPoint = null\r\n        set units = null\r\n        set unitCheck = null\r\n        set caster = null\r\n        set beam = null\r\n        set beamEnd = null\r\n    endfunction\r\n\r\n    private function BeamUse takes nothing returns nothing\r\n        local integer id = GetHandleId( GetExpiredTimer() )\r\n        local lightning beam = LoadLightningHandle( udg_hash, id, StringHash( \"snkqb\" ) )\r\n        local unit caster = LoadUnitHandle( udg_hash, id, StringHash( \"snkq\" ) )\r\n        local integer count = LoadInteger( udg_hash, id, StringHash( \"snkq\" ) ) - 1\r\n        local integer pat = LoadInteger( udg_hash, id, StringHash( \"snkqe\" ) )\r\n        local real turnRateDivide \r\n\r\n        if count <= 0 or IsUnitDead(caster) or pat != udg_Pattern then\r\n        \r\n        \tset turnRateDivide = LoadReal(udg_hash, id, StringHash( \"snkqtr\" ) )\r\n            //call SetUnitTurnSpeed(caster, GetUnitTurnSpeed(caster) - BONUS_TURN_RATE)\r\n            call SetUnitTurnSpeed(caster, GetUnitTurnSpeed(caster) + turnRateDivide)\r\n            //call BJDebugMsg(\"GetUnitTurnSpeed(): BeamUse\" + R2S(GetUnitTurnSpeed(caster)))\r\n            call UnitRemoveAbility(caster, EFFECT)\r\n            call UnitRemoveAbility(caster, BUFF)\r\n            call DestroyLightning(beam)\r\n            call DestroyEffect(LoadEffectHandle(udg_hash, id, StringHash( \"snkqe\" ) ) )\r\n            call FlushChildHashtable( udg_hash, id )\r\n            call DestroyTimer( GetExpiredTimer() )\r\n        else\r\n            call SaveInteger( udg_hash, id, StringHash( \"snkq\" ), count )\r\n            call MoveBeam(caster, beam, id)\r\n        endif\r\n        \r\n        set caster = null\r\n        set beam = null\r\n    endfunction\r\n    \r\n    private function Beam takes unit caster, real damage, real heal returns nothing\r\n        local lightning beam\r\n        local integer id\r\n        local effect beamEnd\r\n        local boolean isDisable = false\r\n        local real turnRateDivide = GetUnitTurnSpeed(caster) - BONUS_TURN_RATE\r\n        \r\n        if LoadTimerHandle( udg_hash, GetHandleId(caster), StringHash( \"snkq\" ) ) == null then\r\n            set isDisable = true\r\n        endif\r\n        \r\n        set id = InvokeTimerWithUnit(caster, \"snkq\", TICK, true, function BeamUse )\r\n        call SaveReal(udg_hash, id, StringHash( \"snkqd\" ), damage )\r\n        call SaveReal(udg_hash, id, StringHash( \"snkqh\" ), heal )\r\n        call SaveInteger( udg_hash, id, StringHash( \"snkqe\" ), udg_Pattern )\r\n        call SaveInteger( udg_hash, id, StringHash( \"snkq\" ), R2I(DURATION/TICK) )\r\n        if isDisable then\r\n            call SetUnitTurnSpeed(caster, GetUnitTurnSpeed(caster) - turnRateDivide)\r\n            //call BJDebugMsg(\"GetUnitTurnSpeed(): BeamUse\" + R2S(GetUnitTurnSpeed(caster)))\r\n            //call BJDebugMsg(\"UNIT_RF_TURN_RATE: Beam\" + R2S(BlzGetUnitRealField(caster, UNIT_RF_TURN_RATE)))\r\n            set beamEnd = AddSpecialEffect(BEAM_END_ANIMATION, GetUnitX(caster), GetUnitY(caster) )\r\n            set beam = AddLightning(LIGHTNING, true, GetUnitX(caster), GetUnitY(caster), GetUnitX(caster), GetUnitY(caster) )\r\n            \r\n            call SaveLightningHandle(udg_hash, id, StringHash( \"snkqb\" ), beam )\r\n            call SaveEffectHandle(udg_hash, id, StringHash( \"snkqe\" ), beamEnd )\r\n            call SaveReal(udg_hash, id, StringHash( \"snkqtr\" ), turnRateDivide )\r\n        endif\r\n        \r\n        set caster = null\r\n        set beam = null\r\n        set beamEnd = null\r\n    endfunction\r\n    \r\n    function Trig_SunKingQ_Actions takes nothing returns nothing\r\n        local unit caster\r\n        local integer level\r\n        local real damage\r\n        local real heal\r\n        local real shieldAdded\r\n        \r\n        if CastLogic() then\r\n            set caster = udg_Target\r\n            set level = udg_Level\r\n        elseif RandomLogic() then\r\n            set caster = udg_Caster\r\n            set level = udg_Level\r\n            call textst( udg_string[0] + GetObjectName(ID_ABILITY), caster, 64, 90, 10, 1.5 )\r\n        else\r\n            set caster = GetSpellAbilityUnit()\r\n            set level = GetUnitAbilityLevel(GetSpellAbilityUnit(), GetSpellAbilityId())\r\n        endif\r\n        \r\n        set shieldAdded = SHIELD_FIRST_LEVEL + (level*SHIELD_LEVEL_BONUS)\r\n        set damage = DAMAGE_FIRST_LEVEL + (level*DAMAGE_LEVEL_BONUS)\r\n        set heal = damage\r\n        \r\n        call UnitAddAbility(caster, EFFECT)\r\n        call shield(caster, caster, shieldAdded)\r\n        call Beam(caster, damage, heal )\r\n\r\n        set caster = null\r\n    endfunction\r\n\r\n    //===========================================================================\r\n    private function init takes nothing returns nothing\r\n        set gg_trg_SunKingQ = CreateTrigger(  )\r\n        call TriggerRegisterAnyUnitEventBJ( gg_trg_SunKingQ, EVENT_PLAYER_UNIT_SPELL_EFFECT )\r\n        call TriggerAddCondition( gg_trg_SunKingQ, Condition( function Trig_SunKingQ_Conditions ) )\r\n        call TriggerAddAction( gg_trg_SunKingQ, function Trig_SunKingQ_Actions )\r\n    endfunction\r\n\r\nendscope\r\n\r\n",
  "Events": [],
  "LocalVariables": [],
  "Conditions": [],
  "Actions": []
}