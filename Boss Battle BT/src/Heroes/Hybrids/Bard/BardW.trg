{
  "Id": 50333220,
  "Comment": "",
  "IsScript": true,
  "RunOnMapInit": false,
  "Script": "scope BardW initializer init\r\n\r\n    globals\r\n        private constant integer ID_ABILITY = 'A1AV'\r\n        private constant integer ID_ABILITY_BUFF = 'B09N'\r\n        \r\n        private constant integer AREA = 500\r\n        private constant integer DURATION = 15\r\n        private constant integer TICK = 3\r\n        \r\n        private constant integer DAMAGE_REDUCTION_INITIAL = -10\r\n        private constant integer DAMAGE_REDUCTION_PER_LEVEL = -5\r\n        \r\n        //private constant integer ID_DAMAGE_REDUCTION = 'A1AZ'\r\n        //private constant integer ID_DAMAGE_REDUCTION_ALTERNATIVE = 'A1C8'\r\n        private constant integer EFFECT_DAMAGE = 'A1AX'\r\n        private constant integer BUFF_DAMAGE = 'B09M'\r\n        \r\n        private constant integer DAMAGE_FIRST_LEVEL = 15\r\n        private constant integer DAMAGE_LEVEL_BONUS = 15\r\n        private constant integer STUN_DURATION = 1\r\n        \r\n        private constant integer DAMAGE_INCREASE_INITIAL = 10\r\n        private constant integer DAMAGE_INCREASE_PER_LEVEL = 5\r\n        //private constant integer ID_DAMAGE_BUFF = 'A1AY'\r\n        //private constant integer ID_DAMAGE_BUFF_ALTERNATIVE = 'A1C9'\r\n        private constant integer EFFECT_HEAL = 'A1AW'\r\n        private constant integer BUFF_HEAL = 'B09L'\r\n        \r\n        private constant integer DAMAGE_MULTIPLIER_ALT = 2\r\n        private constant real MAX_ENEMY_MINION_REDUCTION = 0.5\r\n        \r\n        private constant integer HEAL_FIRST_LEVEL = 15\r\n        private constant integer HEAL_LEVEL_BONUS = 15\r\n        \r\n        private group TempGroup = null\r\n    endglobals\r\n\r\n    function Trig_BardW_Conditions takes nothing returns boolean\r\n        return GetUnitAbilityLevel(GetOrderedUnit(), ID_ABILITY) > 0 and (GetIssuedOrderId() == OrderId(\"immolation\") or GetIssuedOrderId() == OrderId(\"unimmolation\"))\r\n    endfunction\r\n\r\n    function BardWSorrowCast takes nothing returns nothing\r\n        local integer id = GetHandleId( GetExpiredTimer( ) )\r\n        local real dmg = LoadReal( udg_hash, id, StringHash( \"barw\" ) )\r\n        local unit target = LoadUnitHandle( udg_hash, id, StringHash( \"barw\" ) )\r\n        local unit caster = LoadUnitHandle( udg_hash, id, StringHash( \"barwc\" ) )\r\n        \r\n        if IsUnitAlive(target) and GetUnitAbilityLevel( target, EFFECT_DAMAGE) > 0 then\r\n            set IsDisableSpellPower = true\r\n            call UnitTakeDamage(caster, target, dmg, DAMAGE_TYPE_MAGIC)\r\n        else\r\n            call FlushChildHashtable( udg_hash, id )\r\n            call DestroyTimer( GetExpiredTimer() )\r\n        endif\r\n        \r\n        set caster = null\r\n        set target = null\r\n    endfunction\r\n\r\n    function BardWJoyCast takes nothing returns nothing\r\n        local integer id = GetHandleId( GetExpiredTimer( ) )\r\n        local real heal = LoadReal( udg_hash, id, StringHash( \"barwj\" ) )\r\n        local unit target = LoadUnitHandle( udg_hash, id, StringHash( \"barwj\" ) )\r\n        local unit caster = LoadUnitHandle( udg_hash, id, StringHash( \"barwjd\" ) )\r\n\r\n        if IsUnitAlive(target) and GetUnitAbilityLevel( target, EFFECT_HEAL) > 0 then\r\n            call healst( caster, target, heal )\r\n        else\r\n            call FlushChildHashtable( udg_hash, id )\r\n            call DestroyTimer( GetExpiredTimer() )\r\n        endif\r\n        \r\n        set caster = null\r\n        set target = null\r\n    endfunction\r\n    \r\n    private function DeleteBardBuff takes unit target, boolean isBuff returns nothing\r\n    \tlocal integer damage = LoadInteger( udg_hash, GetHandleId(target), StringHash( \"barwat\" ) )\r\n    \t\r\n    \tcall BlzSetUnitBaseDamage( target, BlzGetUnitBaseDamage(target, 0) - damage, 0 )\r\n    \t\r\n    \tif isBuff then\r\n            call RemoveEffect(target, EFFECT_HEAL, BUFF_HEAL)\r\n        else\r\n            call RemoveEffect(target, EFFECT_DAMAGE, BUFF_DAMAGE)\r\n        endif\r\n        \r\n        call RemoveSavedInteger( udg_hash, GetHandleId(target), StringHash(\"barwat\") )\r\n    endfunction\r\n    \r\n    private function ResultEnd takes nothing returns nothing\r\n        local integer id = GetHandleId( GetExpiredTimer() )\r\n        local unit target = LoadUnitHandle( udg_hash, id, StringHash( \"brdwj\" ) )\r\n        local boolean isBuff = LoadBoolean( udg_hash, id, StringHash( \"brdwj\" ) )\r\n        \r\n        call DeleteBardBuff(target, isBuff)\r\n        call FlushChildHashtable( udg_hash, id )\r\n        \r\n        set target = null\r\n    endfunction\r\n    \r\n    private function DeleteBuffToAffected takes unit caster, boolean isBuff returns group\r\n        local unit u\r\n        \r\n    \r\n        set TempGroup = LoadGroupHandle(udg_hash, GetHandleId(caster), StringHash( \"barwg\" ) )\r\n        \r\n        if TempGroup == null then\r\n            set TempGroup = CreateGroup()\r\n            call SaveGroupHandle(udg_hash, GetHandleId(caster), StringHash( \"barwg\" ), TempGroup )\r\n        endif\r\n        \r\n        loop\r\n            set u = FirstOfGroup(TempGroup)\r\n            exitwhen u == null\r\n            call DeleteBardBuff(u, isBuff)\r\n            call GroupRemoveUnit(TempGroup,u)\r\n        endloop\r\n        \r\n        set caster = null\r\n        set u = null\r\n        return TempGroup\r\n    endfunction\r\n    \r\n    private function HealAddBuff takes unit target, integer attackBonus, real duration, unit caster returns nothing \r\n    \tlocal integer unitAttack\r\n        local integer attackToAdd\r\n        local integer id\r\n        local integer g = StringHash( \"brdwj\" )\r\n        \r\n        set duration = timebonus(caster, duration)\r\n        \r\n        set unitAttack = BlzGetUnitBaseDamage(target, 0) + 1\r\n            \r\n    \tif IsUnitType( target, UNIT_TYPE_HERO) == false and IsUnitType( target, UNIT_TYPE_ANCIENT) == false then\r\n    \t\tset attackToAdd = IMinBJ(unitAttack, attackBonus)\r\n    \telse\r\n    \t\tset attackToAdd = attackBonus\r\n    \tendif\r\n    \t\r\n    \tcall BlzSetUnitBaseDamage( target, BlzGetUnitBaseDamage(target, 0) + attackToAdd, 0 )\r\n    \r\n        //call bufallst( caster, target, EFFECT_HEAL, 0, 0, 0, 0, BUFF_HEAL, \"brdwj\", duration )\r\n        \r\n      \r\n        call UnitAddAbility( target, EFFECT_HEAL )\r\n        \r\n        set id = GetHandleId( target )\r\n        if LoadTimerHandle( udg_hash, id, g ) == null then\r\n            call SaveTimerHandle( udg_hash, id, g, CreateTimer() )\r\n        endif\r\n        set id = GetHandleId( LoadTimerHandle( udg_hash, id, g ) ) \r\n        call SaveUnitHandle( udg_hash, id, g, target )\r\n        call SaveBoolean( udg_hash, id, g, true )\r\n        call TimerStart( LoadTimerHandle( udg_hash, GetHandleId( target ), g ), duration, false, function ResultEnd )\r\n        \r\n        call SaveInteger( udg_hash, GetHandleId(target), StringHash( \"barwat\" ), attackToAdd )\r\n        \r\n        set target = null\r\n        set caster = null\r\n    endfunction\r\n    \r\n    private function Heal_Alternative takes unit caster, integer level, real duration returns nothing \r\n        local group g = CreateGroup()\r\n        local unit n\r\n        local group affected = DeleteBuffToAffected(caster, false)\r\n        local integer attackBonus = DAMAGE_INCREASE_INITIAL + (DAMAGE_INCREASE_PER_LEVEL * level)\r\n        \r\n        set attackBonus = attackBonus * DAMAGE_MULTIPLIER_ALT\r\n        \r\n        call GroupEnumUnitsInRange( g, GetUnitX( caster ), GetUnitY( caster ), AREA, null )\r\n        loop\r\n            set n = FirstOfGroup(g)\r\n            exitwhen n == null\r\n            if unitst( n, caster, \"ally\" ) then\r\n            \tcall HealAddBuff(n, attackBonus, duration, caster)\r\n                call GroupAddUnit(affected,n)\r\n            endif\r\n            call GroupRemoveUnit(g,n)\r\n        endloop\r\n        \r\n        call GroupClear( g )\r\n        call DestroyGroup( g )\r\n        set n = null\r\n        set g = null\r\n        set affected = null\r\n        set caster = null\r\n    endfunction\r\n    \r\n    private function Heal_Main takes unit caster, integer level, real duration returns nothing \r\n        local group g = CreateGroup()\r\n        local unit n\r\n        local integer heal\r\n        local integer id\r\n        local group affected = DeleteBuffToAffected(caster, false)\r\n        local integer attackBonus = DAMAGE_INCREASE_INITIAL + (DAMAGE_INCREASE_PER_LEVEL * level)\r\n        local integer unitAttack\r\n        local integer attackToAdd\r\n    \r\n        set heal = ( HEAL_FIRST_LEVEL + ( HEAL_LEVEL_BONUS * level ) )\r\n        call GroupEnumUnitsInRange( g, GetUnitX( caster ), GetUnitY( caster ), AREA, null )\r\n        loop\r\n            set n = FirstOfGroup(g)\r\n            exitwhen n == null\r\n            if unitst( n, caster, \"ally\" ) then\r\n            \tcall HealAddBuff(n, attackBonus, duration, caster)\r\n            \t\r\n            \tset id = InvokeTimerWithUnit(n, \"barwj\", TICK, true, function BardWJoyCast ) \r\n                call SaveUnitHandle( udg_hash, id, StringHash( \"barwjd\" ), caster ) \r\n                call SaveReal( udg_hash, id, StringHash( \"barwj\" ), heal )\r\n                call GroupAddUnit(affected,n)\r\n            endif\r\n            call GroupRemoveUnit(g,n)\r\n        endloop\r\n        \r\n        call DestroyGroup( g )\r\n        set n = null\r\n        set g = null\r\n        set caster = null\r\n        set affected = null\r\n    endfunction\r\n\r\n    private function Heal takes unit caster, integer level, real duration returns nothing\r\n        if Aspects_IsHeroAspectActive( caster, ASPECT_02 ) then\r\n            call Heal_Alternative( caster, level, duration )\r\n        else\r\n            call Heal_Main( caster, level, duration )\r\n        endif\r\n        \r\n        set caster = null\r\n    endfunction\r\n    \r\n    private function DamageAddBuff takes unit target, integer attackBonus, real duration, unit caster returns nothing \r\n    \tlocal integer unitAttack = BlzGetUnitBaseDamage(target, 0) + 1\r\n        local integer attackToAdd\r\n        local integer id\r\n        local integer g = StringHash( \"brdwj\" )\r\n        \r\n        set duration = timebonus(caster, duration)\r\n            \r\n    \tif IsUnitType( target, UNIT_TYPE_HERO) == false and IsUnitType( target, UNIT_TYPE_ANCIENT) == false then\r\n    \t\tset attackToAdd = -IMinBJ( R2I( unitAttack * MAX_ENEMY_MINION_REDUCTION ), -attackBonus)\r\n    \telse\r\n    \t\tset attackToAdd = attackBonus\r\n    \tendif\r\n        \r\n\t    call BlzSetUnitBaseDamage( target, BlzGetUnitBaseDamage(target, 0) + attackToAdd, 0 )\r\n\r\n        //call bufallst( caster, target, EFFECT_DAMAGE, 0, 0, 0, 0, BUFF_DAMAGE, \"brdws\", duration )\r\n        \r\n        call UnitAddAbility( target, EFFECT_DAMAGE )\r\n        \r\n        set id = GetHandleId( target )\r\n        if LoadTimerHandle( udg_hash, id, g ) == null then\r\n            call SaveTimerHandle( udg_hash, id, g, CreateTimer() )\r\n        endif\r\n        set id = GetHandleId( LoadTimerHandle( udg_hash, id, g ) ) \r\n        call SaveUnitHandle( udg_hash, id, g, target )\r\n        call SaveBoolean( udg_hash, id, g, false )\r\n        call TimerStart( LoadTimerHandle( udg_hash, GetHandleId( target ), g ), duration, false, function ResultEnd )\r\n        \r\n        call SaveInteger( udg_hash, GetHandleId(target), StringHash( \"barwat\" ), attackToAdd )\r\n        \r\n        set target = null\r\n        set caster = null\r\n    endfunction\r\n        \r\n    private function Damage_Alternative takes unit caster, integer level, real duration returns nothing \r\n        local group g = CreateGroup()\r\n        local unit n\r\n        local group affected = DeleteBuffToAffected(caster, true)\r\n        local integer attackBonus = DAMAGE_REDUCTION_INITIAL + (DAMAGE_REDUCTION_PER_LEVEL * level)\r\n        \r\n        \r\n        set attackBonus = attackBonus * DAMAGE_MULTIPLIER_ALT\r\n        \r\n        call GroupEnumUnitsInRange( g, GetUnitX( caster ), GetUnitY( caster ), AREA, null )\r\n        loop\r\n            set n = FirstOfGroup(g)\r\n            exitwhen n == null\r\n            if unitst( n, caster, TARGET_ENEMY )  then\r\n                call UnitStun(caster, n, STUN_DURATION )\r\n                \r\n                call DamageAddBuff(n, attackBonus, duration, caster)\r\n                call GroupAddUnit(affected,n)\r\n            endif\r\n            call GroupRemoveUnit(g,n)\r\n        endloop\r\n        \r\n        call GroupClear( g )\r\n        call DestroyGroup( g )\r\n        set n = null\r\n        set g = null\r\n        set caster = null\r\n        set affected = null\r\n    endfunction\r\n    \r\n    private function Damage_Main takes unit caster, integer level, real duration returns nothing \r\n        local integer index = GetUnitUserData(caster)\r\n        local group g = CreateGroup()\r\n        local unit n\r\n        local real damage\r\n        local integer id\r\n        local group affected = DeleteBuffToAffected(caster, true)\r\n        local integer attackBonus = DAMAGE_REDUCTION_INITIAL + (DAMAGE_REDUCTION_PER_LEVEL * level)\r\n        local integer unitAttack\r\n        local integer attackToAdd\r\n        \r\n        set damage = (DAMAGE_FIRST_LEVEL + (DAMAGE_LEVEL_BONUS*level))*GetUnitSpellPower(caster)\r\n        call GroupEnumUnitsInRange( g, GetUnitX( caster ), GetUnitY( caster ), AREA, null )\r\n        loop\r\n            set n = FirstOfGroup(g)\r\n            exitwhen n == null\r\n            if unitst( n, caster, TARGET_ENEMY )  then\r\n                call UnitStun(caster, n, STUN_DURATION )\r\n                \r\n                call DamageAddBuff(n, attackBonus, duration, caster)\r\n                \r\n                set id = InvokeTimerWithUnit( n, \"barw\", TICK, true, function BardWSorrowCast )\r\n                call SaveUnitHandle( udg_hash, id, StringHash( \"barwc\" ), caster )\r\n                call SaveReal( udg_hash, id, StringHash( \"barw\" ), damage )\r\n                \r\n                call GroupAddUnit(affected,n)\r\n            endif\r\n            call GroupRemoveUnit(g,n)\r\n        endloop\r\n        \r\n        call GroupClear( g )\r\n        call DestroyGroup( g )\r\n        set n = null\r\n        set g = null\r\n        set caster = null\r\n        set affected = null\r\n    endfunction\r\n    \r\n    private function Damage takes unit caster, integer level, real duration returns nothing\r\n\r\n        if Aspects_IsHeroAspectActive( caster, ASPECT_02 ) then\r\n            call Damage_Alternative( caster, level, duration )\r\n        else\r\n            call Damage_Main( caster, level, duration )\r\n        endif\r\n        \r\n        set caster = null\r\n    endfunction\r\n\r\n    function Trig_BardW_Actions takes nothing returns nothing\r\n        local unit hero = GetOrderedUnit()\r\n        local integer lvl = GetUnitAbilityLevel( hero, ID_ABILITY )\r\n        local real duration = timebonus(hero, DURATION)\r\n\r\n        if GetIssuedOrderId() == OrderId(\"immolation\") then\r\n            call Heal(hero, lvl, duration)\r\n        elseif GetIssuedOrderId() == OrderId(\"unimmolation\") and IsUnitHasAbility(hero, ID_ABILITY_BUFF) then\r\n            call Damage(hero, lvl, duration)\r\n        endif\r\n        \r\n        set hero = null\r\n    endfunction\r\n    \r\n\r\n    private function DeleteBuff_Conditions takes nothing returns boolean\r\n        return IsUnitHasAbility( Event_DeleteBuff_Unit, EFFECT_HEAL)\r\n    endfunction\r\n    \r\n    private function DeleteBuff takes nothing returns nothing\r\n        //call RemoveEffect( Event_DeleteBuff_Unit, EFFECT_HEAL, BUFF_HEAL )\r\n        call DeleteBardBuff(Event_DeleteBuff_Unit, true)\r\n    endfunction\r\n\r\n    //===========================================================================\r\n    private function init takes nothing returns nothing\r\n        set gg_trg_BardW = CreateTrigger(  )\r\n        call TriggerRegisterAnyUnitEventBJ( gg_trg_BardW, EVENT_PLAYER_UNIT_ISSUED_ORDER )\r\n        call TriggerAddCondition( gg_trg_BardW, Condition( function Trig_BardW_Conditions ) )\r\n        call TriggerAddAction( gg_trg_BardW, function Trig_BardW_Actions )\r\n        \r\n        call CreateEventTrigger( \"Event_DeleteBuff_Real\", function DeleteBuff, function DeleteBuff_Conditions )\r\n    endfunction\r\n\r\nendscope",
  "Events": [],
  "LocalVariables": [],
  "Conditions": [],
  "Actions": []
}