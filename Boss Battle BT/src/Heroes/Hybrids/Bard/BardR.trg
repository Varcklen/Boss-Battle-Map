{
  "Id": 50333222,
  "Comment": "",
  "IsScript": true,
  "RunOnMapInit": false,
  "Script": "scope BardR initializer init\r\n\r\n    globals\r\n        private constant integer ID_ABILITY = 'A1B0'\r\n        \r\n        private constant integer DURATION_FIRST_LEVEL = 4\r\n        private constant integer DURATION_LEVEL_BONUS = 3\r\n        private constant integer MANA_BONUS = 15\r\n        private constant integer SET_HEALTH_PERCENT_AFTER_RESSURECT = 50\r\n        \r\n        private constant integer RESSURECTS_ALTERNATIVE = 2\r\n        \r\n        private constant integer EFFECT = 'A1B1'\r\n        private constant integer BUFF = 'B09O'\r\n    endglobals\r\n\r\n    function Trig_BardR_Conditions takes nothing returns boolean\r\n        return GetSpellAbilityId() == ID_ABILITY and combat( GetSpellAbilityUnit(), true, GetSpellAbilityId() ) and udg_fightmod[3] == false\r\n    endfunction \r\n\r\n    private function BardRCast takes nothing returns nothing\r\n        local integer id = GetHandleId( GetExpiredTimer() )\r\n        local unit u = LoadUnitHandle( udg_hash, id, StringHash( \"brdr\" ) )\r\n\r\n        if IsUnitAlive(u) and combat( u, false, 0 ) and udg_fightmod[3] == false and GetUnitAbilityLevel( u, EFFECT) > 0 then\r\n            call KillUnit(u)\r\n        endif\r\n        call UnitRemoveAbility( u, EFFECT )\r\n        call UnitRemoveAbility( u, BUFF )\r\n        call FlushChildHashtable( udg_hash, id )\r\n        \r\n        set u = null\r\n    endfunction\r\n    \r\n    private function Alternative takes unit caster, real duration, integer level returns nothing \r\n        local unit deadHero\r\n        local unit randomHero\r\n        local integer i\r\n    \r\n        set deadHero = DeathSystem_GetRandomDeadHero()\r\n        if deadHero != null then\r\n            set i = 1\r\n            loop\r\n                exitwhen i > RESSURECTS_ALTERNATIVE or deadHero == null\r\n                set deadHero = DeathSystem_GetRandomDeadHero()\r\n                if deadHero != null then\r\n                    call ResInBattle( caster, deadHero, SET_HEALTH_PERCENT_AFTER_RESSURECT )\r\n                \r\n                    call BlzSetUnitMaxMana( deadHero, BlzGetUnitMaxMana(deadHero) + MANA_BONUS )\r\n                    \r\n                    call UnitAddAbility( deadHero, EFFECT )\r\n                    call InvokeTimerWithUnit(deadHero, \"brdr\", duration, false, function BardRCast)\r\n                endif\r\n                set i = i + 1\r\n            endloop\r\n        else\r\n            set randomHero = DeathSystem_GetRandomAliveHero()\r\n            if randomHero != null then\r\n                call BardEUse( caster, randomHero, level )\r\n            endif\r\n        endif\r\n        \r\n        set randomHero = null\r\n        set deadHero = null\r\n        set caster = null\r\n    endfunction\r\n    \r\n    private function Main takes unit caster, real duration, integer level returns nothing \r\n        local unit deadHero\r\n        local integer i\r\n    \r\n        set deadHero = DeathSystem_GetRandomDeadHero()\r\n\r\n        if deadHero != null then\r\n            call ResInBattle( caster, deadHero, SET_HEALTH_PERCENT_AFTER_RESSURECT )\r\n            \r\n            call BlzSetUnitMaxMana( deadHero, BlzGetUnitMaxMana(deadHero) + MANA_BONUS )\r\n            \r\n            call UnitAddAbility( deadHero, EFFECT )\r\n            call InvokeTimerWithUnit(deadHero, \"brdr\", duration, false, function BardRCast)\r\n        else\r\n            set i = 1\r\n            loop\r\n                exitwhen i > PLAYERS_LIMIT\r\n                if unitst( caster, udg_hero[i], TARGET_ALLY ) then\r\n                    call BardEUse( caster, udg_hero[i], level )\r\n                endif\r\n                set i = i + 1\r\n            endloop\r\n        endif\r\n        \r\n        set deadHero = null\r\n        set caster = null\r\n    endfunction\r\n\r\n    function Trig_BardR_Actions takes nothing returns nothing\r\n        local unit caster\r\n        local integer lvl\r\n        local real t\r\n        \r\n        if CastLogic() then\r\n            set caster = udg_Caster\r\n            set lvl = udg_Level\r\n            set t = udg_Time\r\n        elseif RandomLogic() then\r\n            set caster = udg_Caster\r\n            set lvl = udg_Level\r\n            call textst( udg_string[0] + GetObjectName(ID_ABILITY), caster, 64, 90, 10, 1.5 )\r\n            set t = DURATION_FIRST_LEVEL+(DURATION_LEVEL_BONUS*lvl)\r\n        else\r\n            set caster = GetSpellAbilityUnit()\r\n            set lvl = GetUnitAbilityLevel(GetSpellAbilityUnit(), GetSpellAbilityId())\r\n            set t = DURATION_FIRST_LEVEL+(DURATION_LEVEL_BONUS*lvl)\r\n        endif\r\n        set t = timebonus(caster, t)+RESSURECTION_DURATION\r\n        \r\n        if Aspects_IsHeroAspectActive( caster, ASPECT_03 ) then\r\n            call Alternative( caster, t, lvl )\r\n        else\r\n            call Main( caster, t, lvl )\r\n        endif\r\n\r\n        set caster = null\r\n    endfunction\r\n\r\n    private function DeleteBuff_Conditions takes nothing returns boolean\r\n        return GetUnitAbilityLevel( Event_DeleteBuff_Unit, EFFECT) > 0\r\n    endfunction\r\n    \r\n    private function DeleteBuff takes nothing returns nothing\r\n        local unit hero = Event_DeleteBuff_Unit\r\n\r\n        call UnitRemoveAbility( hero, EFFECT )\r\n        call UnitRemoveAbility( hero, BUFF )\r\n        \r\n        set hero = null\r\n    endfunction\r\n\r\n    //===========================================================================\r\n    private function init takes nothing returns nothing\r\n        set gg_trg_BardR = CreateTrigger(  )\r\n        call TriggerRegisterAnyUnitEventBJ( gg_trg_BardR, EVENT_PLAYER_UNIT_SPELL_EFFECT )\r\n        call TriggerAddCondition( gg_trg_BardR, Condition( function Trig_BardR_Conditions ) )\r\n        call TriggerAddAction( gg_trg_BardR, function Trig_BardR_Actions )\r\n        \r\n        call CreateEventTrigger( \"Event_DeleteBuff_Real\", function DeleteBuff, function DeleteBuff_Conditions )\r\n    endfunction\r\n\r\nendscope",
  "Events": [],
  "LocalVariables": [],
  "Conditions": [],
  "Actions": []
}