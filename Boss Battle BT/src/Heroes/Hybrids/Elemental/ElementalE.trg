{
  "Id": 50333216,
  "Comment": "",
  "IsScript": true,
  "RunOnMapInit": false,
  "Script": "scope ElementalE initializer init\r\n\r\n    globals\r\n        private constant integer ID_ABILITY = 'A0LP'\r\n        \r\n        private constant real BONUS_DAMAGE_FIRST_LEVEL = 0.05\r\n        private constant real BONUS_DAMAGE_LEVEL_BONUS = 0.1\r\n        private constant real BONUS_HEAL_FIRST_LEVEL = 0.05\r\n        private constant real BONUS_HEAL_LEVEL_BONUS = 0.1\r\n        \r\n        private constant integer EXTRA_BONUS_DAMAGE_ALTERNATIVE = 2\r\n        private constant integer EXTRA_BONUS_HEAL_ALTERNATIVE = 2\r\n    endglobals\r\n\r\n    private function OnDamageChange_Conditions takes nothing returns boolean\r\n        return udg_IsDamageSpell == false and GetUnitAbilityLevel( udg_DamageEventSource, ID_ABILITY ) > 0\r\n    endfunction\r\n\r\n    private function Alternative takes real bonusDamage returns nothing \r\n        set bonusDamage = bonusDamage * EXTRA_BONUS_DAMAGE_ALTERNATIVE\r\n        set udg_DamageEventAmount = udg_DamageEventAmount + (Event_OnDamageChange_StaticDamage*bonusDamage)\r\n    endfunction\r\n    \r\n    private function Main takes real bonusDamage returns nothing \r\n        set udg_DamageEventAmount = udg_DamageEventAmount + (Event_OnDamageChange_StaticDamage*bonusDamage)\r\n    endfunction\r\n\r\n    private function OnDamageChange takes nothing returns nothing\r\n        local unit hero = udg_DamageEventSource\r\n        local integer level = GetUnitAbilityLevel( hero, ID_ABILITY )\r\n        local real bonusDamage = BONUS_DAMAGE_FIRST_LEVEL + ( level * BONUS_DAMAGE_LEVEL_BONUS )\r\n        \r\n        if Aspects_IsHeroAspectActive( hero, ASPECT_02 ) then\r\n            call Alternative( bonusDamage )\r\n        else\r\n            call Main( bonusDamage )\r\n        endif\r\n        \r\n        set hero = null\r\n    endfunction\r\n    \r\n    private function OnHealChange_Conditions takes nothing returns boolean\r\n        return IsUnitHasAbility( Event_OnHealChange_Target, ID_ABILITY ) and Event_OnHealChange_Caster != Event_OnHealChange_Target\r\n    endfunction\r\n    \r\n    private function Alternative_Heal takes real bonusHeal returns nothing \r\n        set bonusHeal = bonusHeal * EXTRA_BONUS_HEAL_ALTERNATIVE\r\n        set Event_OnHealChange_Heal = Event_OnHealChange_Heal - (Event_OnHealChange_StaticHeal*bonusHeal)\r\n    endfunction\r\n    \r\n    private function Main_Heal takes real bonusHeal returns nothing \r\n        set Event_OnHealChange_Heal = Event_OnHealChange_Heal - (Event_OnHealChange_StaticHeal*bonusHeal)\r\n    endfunction\r\n    \r\n    private function OnHealChange takes nothing returns nothing\r\n        local unit hero = Event_OnHealChange_Target\r\n        local integer level = GetUnitAbilityLevel( hero, ID_ABILITY )\r\n        local real bonusHeal = BONUS_HEAL_FIRST_LEVEL + ( level * BONUS_HEAL_LEVEL_BONUS )\r\n        \r\n        if Aspects_IsHeroAspectActive( hero, ASPECT_02 ) then\r\n            call Alternative_Heal( bonusHeal )\r\n        else\r\n            call Main_Heal( bonusHeal )\r\n        endif\r\n        \r\n        set hero = null\r\n    endfunction\r\n    \r\n    //===========================================================================\r\n    private function init takes nothing returns nothing\r\n        call CreateEventTrigger( \"Event_OnDamageChange_Real\", function OnDamageChange, function OnDamageChange_Conditions )\r\n        call CreateEventTrigger( \"Event_OnHealChange_Real\", function OnHealChange, function OnHealChange_Conditions )\r\n    endfunction\r\nendscope\r\n",
  "Events": [],
  "LocalVariables": [],
  "Conditions": [],
  "Actions": []
}