{
  "Id": 50332335,
  "Comment": "",
  "IsScript": true,
  "RunOnMapInit": false,
  "Script": "library JuleLib initializer init requires ItemRandomizerLib, WeaponPieceSystem\r\n\r\n    globals\r\n        constant integer ROW_LIMIT = 4\r\n        constant integer ROW_LIMIT_ARRAYS = ROW_LIMIT + 1\r\n        constant integer COLUMN_LIMIT = 4\r\n        constant integer COLUMN_LIMIT_ARRAYS = COLUMN_LIMIT + 1\r\n        \r\n        public constant integer INITIAL_OPEN_SLOTS = 8\r\n        \r\n        private constant integer ITEMS_COUNT = ROW_LIMIT*COLUMN_LIMIT\r\n        private constant integer ITEMS_COUNT_ARRAYS = ITEMS_COUNT + 1\r\n        \r\n        private integer array ItemInSlot[ITEMS_COUNT_ARRAYS]\r\n        private integer array CostInSlot[ITEMS_COUNT_ARRAYS]\r\n        \r\n        public string array Item_Name[ITEMS_COUNT_ARRAYS]\r\n        public string array Item_Description[ITEMS_COUNT_ARRAYS]\r\n        \r\n        private constant real DISCOUNT_MIN = 0.2\r\n        private constant integer DISCOUNT_CHANCE = 4\r\n        private constant real DISCOUNT = 0.3\r\n        \r\n        private constant integer SUPER_DISCOUNT_CHANCE = 1\r\n        private constant real SUPER_DISCOUNT = 0.6\r\n        \r\n        private integer array FutureItem[ITEMS_COUNT_ARRAYS]\r\n        private integer array FutureCost[ITEMS_COUNT_ARRAYS]\r\n        \r\n        /*private integer StockAmount_Legendary = 1\r\n        private integer StockAmount_Rare = 3\r\n        private integer StockAmount_Common = 4*/\r\n        \r\n        private integer array StockAmount[4]\r\n        private integer array SlotStockIncrease[ITEMS_COUNT]\r\n    endglobals\r\n    \r\n    public function StockAmountChange takes integer slotsAvailable returns nothing\r\n    \tlocal integer rarityType\r\n    \t\r\n    \tset slotsAvailable = slotsAvailable - INITIAL_OPEN_SLOTS\r\n    \tset rarityType = SlotStockIncrease[slotsAvailable]\r\n    \tset StockAmount[rarityType] = StockAmount[rarityType] + 1\r\n    endfunction\r\n\r\n    private function JuleCast takes nothing returns nothing\r\n        local integer cyclA = 1\r\n        local integer cyclB = 1\r\n\r\n        call BlzFrameSetVisible( julerefr, true )\r\n        set cyclA = 1\r\n        loop\r\n            exitwhen cyclA > 4\r\n            set cyclB = 1\r\n            loop\r\n                exitwhen cyclB > 4\r\n                if cyclB < 3 or (cyclB >= 3 and julebool[cyclA][IMaxBJ(1,cyclB-2)]) then\r\n                    call BlzFrameSetVisible( juleicon[cyclA][cyclB], true )\r\n                endif\r\n                set cyclB = cyclB + 1\r\n            endloop\r\n            set cyclA = cyclA + 1\r\n        endloop \r\n\r\n        call FlushChildHashtable( udg_hash, GetHandleId( GetExpiredTimer() ) )\r\n    endfunction\r\n\r\n    private function JulePause takes nothing returns nothing\r\n        local integer cyclA = 1\r\n        local integer cyclB = 1\r\n        \r\n        call BlzFrameSetVisible( julerefr, false )\r\n        set cyclA = 1\r\n        loop\r\n            exitwhen cyclA > 4\r\n            set cyclB = 1\r\n            loop\r\n                exitwhen cyclB > 4\r\n                if cyclB < 3 or (cyclB >= 3 and julebool[cyclA][IMaxBJ(1,cyclB-2)]) then\r\n                    call BlzFrameSetVisible( juleicon[cyclA][cyclB], false )\r\n                endif\r\n                set cyclB = cyclB + 1\r\n            endloop\r\n            set cyclA = cyclA + 1\r\n        endloop \r\n        \r\n        if LoadTimerHandle( udg_hash, 1, StringHash( \"jule\" ) ) == null  then\r\n            call SaveTimerHandle( udg_hash, 1, StringHash( \"jule\" ), CreateTimer() )\r\n        endif\r\n        call TimerStart( LoadTimerHandle( udg_hash, 1, StringHash( \"jule\" ) ), 0.25, false, function JuleCast )\r\n    endfunction\r\n\r\n    private function PreCount takes nothing returns real\r\n        local integer cyclA = 1\r\n        local real count = 1\r\n        \r\n        loop\r\n            exitwhen cyclA > 4\r\n            if udg_hero[cyclA] != null then\r\n\t            call ChangeGlobalJuleShopCost.SetDataUnit(\"caster\", udg_hero[cyclA])\r\n\t\t\t    call ChangeGlobalJuleShopCost.SetDataReal(\"new_value\", count)\r\n\t\t\t    call ChangeGlobalJuleShopCost.SetDataReal(\"static_value\", count)\r\n\t\t\t    call ChangeGlobalJuleShopCost.Invoke()\r\n\t\t\t    \r\n\t\t\t    set count = ChangeGlobalJuleShopCost.GetDataReal(\"new_value\")\r\n            /*if inv( udg_hero[cyclA], 'I01C' ) > 0 then\r\n                set count = count - 0.2\r\n            endif*/\r\n        \tendif\r\n            set cyclA = cyclA + 1\r\n        endloop\r\n        \r\n        set count = 1 - RMaxBJ(0,count)\r\n        return count\r\n    endfunction\r\n    \r\n    private function IsItemExist takes integer itemId, integer currentSlotCheck returns boolean\r\n        local integer i = 1\r\n        local integer iMax = currentSlotCheck - 1\r\n        \r\n        loop\r\n            exitwhen i > 4\r\n            if inv( udg_hero[i], itemId ) > 0 then\r\n                return true\r\n            endif\r\n            set i = i + 1\r\n        endloop\r\n        set i = 1\r\n        loop\r\n            exitwhen i > iMax\r\n            if itemId == ItemInSlot[i] then\r\n                return true\r\n            endif\r\n            set i = i + 1\r\n        endloop\r\n        \r\n        return false\r\n    endfunction\r\n\r\n    private function ChangeCost takes integer oldCost, real count, integer shopSlot, boolean cond returns integer\r\n        local integer cost = oldCost\r\n        \r\n        set cost = cost - R2I(count*oldCost)\r\n        \r\n        if GetRandomInt(1,100) == SUPER_DISCOUNT_CHANCE then\r\n            set cost = cost - R2I(SUPER_DISCOUNT*oldCost)\r\n        elseif GetRandomInt(1,100) <= DISCOUNT_CHANCE or (shopSlot == 1 and cond) then\r\n            set cost = cost - R2I(DISCOUNT*oldCost)\r\n        endif\r\n        \r\n        set cost = R2I(RMaxBJ(DISCOUNT_MIN*oldCost, cost))\r\n        return cost\r\n    endfunction\r\n    \r\n    private function GetItemCost takes item itemToCheck, integer shopSlot returns integer\r\n    \tlocal integer result = 0\r\n    \tlocal itemtype itemType = GetItemType(itemToCheck)\r\n    \t\r\n    \tif FutureCost[shopSlot] != 0 then\r\n    \t\tset result = FutureCost[shopSlot]\r\n    \telseif itemType == ITEM_TYPE_PERMANENT then\r\n            set result = 500\r\n        elseif itemType == ITEM_TYPE_CAMPAIGN then\r\n            set result = 750\r\n        elseif itemType == ITEM_TYPE_ARTIFACT then\r\n            set result = 1000\r\n        endif\r\n    \t\r\n    \tset itemType = null\r\n    \tset itemToCheck = null\r\n    \treturn result\r\n    endfunction\r\n    \r\n    private function GetCostColor takes integer newCost, integer oldCost returns string\r\n    \tif newCost <= 0.45 * oldCost then\r\n            return \"|cFFFF4646\"\r\n        elseif newCost <= 0.75 * oldCost then\r\n            return \"|cFFFE9050\"\r\n        elseif newCost > oldCost then\r\n            return \"|cFFBCC0C3\"\r\n        endif\r\n        return \"\"\r\n    endfunction\r\n    \r\n    private function EnableExtraInfoFrame takes player owner, framehandle frame, string icon returns nothing\r\n    \tif GetLocalPlayer() == owner then\r\n\t    \tcall BlzFrameSetVisible( frame, true )\r\n\t    \tcall BlzFrameSetTexture( frame, icon, 0, true )\r\n    \tendif\r\n\tendfunction\r\n\t\r\n\tprivate function ExtraInfo_CheckTripleSet takes unit hero, player owner, framehandle frame, item itemCheck returns nothing\r\n\t\tlocal integer itemType = GetItemTypeId(itemCheck)\r\n\t\tlocal TripleSet tripleSet = TripleSet.Get(itemType)\r\n\t\tlocal integer i = 0\r\n\t\tlocal integer iMax = UnitInventorySize(hero)\r\n\t\tlocal string icon = null\r\n\t\tlocal item itemLoop\r\n\t\t\r\n\t\tloop\r\n\t\t\texitwhen i >= iMax or icon != null\r\n\t\t\tset itemLoop = UnitItemInSlot(hero, i)\r\n\t\t\tif tripleSet.IsPiece(GetItemTypeId(itemLoop)) then\r\n\t\t\t\tset icon = BlzGetItemIconPath(itemLoop)\r\n\t\t\tendif\r\n\t\t\tset i = i + 1\r\n\t\tendloop\r\n\t\t\r\n\t\tif icon != null then\r\n\t\t\tcall EnableExtraInfoFrame(owner, frame, icon )\r\n\t\tendif\r\n\t\t\r\n\t\tset itemLoop = null\r\n\tendfunction\r\n\t\r\n\tprivate function ExtraInfo_HeroCheck takes integer index, item itemCheck, framehandle frame returns nothing\r\n\t\tlocal player owner = Player(index - 1)\r\n\t\tlocal unit hero\r\n\t\t\r\n\t\tif GetPlayerSlotState(owner) != PLAYER_SLOT_STATE_PLAYING then\r\n\t\t\tset owner = null\r\n\t\t\treturn\r\n\t\tendif\r\n\t\t\r\n\t\tset hero = udg_hero[index]\r\n\t\t\r\n\t\tif TagSystem_GetInventoryAmountOfTagItems( hero, TAG_UNMERGED_ORB) > 0 and TagSystem_CheckTagItem( itemCheck, TAG_UNMERGED_ORB ) then\r\n\t\t\tcall EnableExtraInfoFrame(owner, frame, \"ReplaceableTextures\\\\CommandButtons\\\\BTNOrbofSlowness.blp\")\r\n\t\telseif WeaponPieceSystem_IsItemCanBeAddedToUltimateWeapon(hero, GetItemTypeId(itemCheck)) then// udg_logic[index + 54] and Weapon_Logic(itemCheck) and WeaponPieceSystem_IsItemTypeAdded(hero, GetItemTypeId(itemCheck)) == false then\r\n\t\t\tcall EnableExtraInfoFrame(owner, frame, \"war3mapImported\\\\ATCAchievement_Arena_3v3_7_result.blp\")\r\n\t\telseif TagSystem_GetInventoryAmountOfTagItems( hero, TAG_TRIPLE_SET_PIECE) > 0 and TagSystem_CheckTagItem( itemCheck, TAG_TRIPLE_SET_PIECE ) then\r\n\t\t\tcall ExtraInfo_CheckTripleSet(hero, owner, frame, itemCheck)\r\n\t\telseif inv( hero, 'I06V') > 0 and TagSystem_CheckTagItem( itemCheck, TAG_CORRUPTED ) then\r\n\t\t\tcall EnableExtraInfoFrame(owner, frame, \"war3mapImported\\\\BTNINV_Glyph_MinorWarrior.blp\")\r\n\t\telseif inv( hero, 'I0BX') > 0 and TagSystem_CheckTagItem( itemCheck, TAG_ACTIVATABLE ) then\r\n\t\t\tcall EnableExtraInfoFrame(owner, frame, \"war3mapImported\\\\BTNINV_Glyph_MinorMage.blp\")\r\n\t\tendif\r\n\t\t\r\n\t\tset hero = null\r\n\t\tset owner = null\r\n    endfunction\r\n\t\r\n    private function SetExtraInfo takes item itemCheck, framehandle frame returns nothing\r\n\t\tlocal integer i = 1\r\n\t\t\r\n\t\tloop\r\n\t\t\texitwhen i > PLAYERS_LIMIT\r\n\t\t\tcall ExtraInfo_HeroCheck(i, itemCheck, frame)\r\n\t\t\tset i = i + 1\r\n\t\tendloop\r\n    endfunction\r\n    \r\n    private function SetShopSlot takes integer shopSlot, integer row, integer column, real preCount, boolean preCountBool returns nothing\r\n    \tlocal string costColor\r\n    \tlocal integer itemCost\r\n    \tlocal integer oldItemCost\r\n    \tlocal item tempItem = CreateItem(ItemInSlot[shopSlot], 0, 0 )\r\n    \t\r\n    \tcall BlzFrameSetVisible( JuleExtraInfo[row][column], false )\r\n    \tcall SetExtraInfo(tempItem, JuleExtraInfo[row][column] )\r\n    \t\r\n    \tset itemCost = GetItemCost(tempItem, shopSlot)\r\n    \t\r\n    \tset CostInSlot[shopSlot] = itemCost\r\n    \t\r\n        set oldItemCost = itemCost\r\n        set itemCost = ChangeCost(itemCost, preCount, shopSlot, preCountBool)\r\n        \r\n        set costColor = GetCostColor(itemCost, oldItemCost)\r\n        \r\n        set julecost[row][column] = itemCost\r\n        call BlzFrameSetText( juletext[row][column], costColor + I2S(itemCost)+ \" G|r\" )\r\n         \r\n        call BlzFrameSetTexture( juleicon[row][column], BlzGetItemIconPath(tempItem), 0, true )\r\n        //call BlzFrameSetSize( julediscback[row][column], 0.35, StringSizeStableTool(str) )\r\n        //call BlzFrameSetText( julename[row][column], GetItemName(bj_lastCreatedItem) )\r\n        //call BlzFrameSetText( juledisc[row][column], str )\r\n        set Item_Name[shopSlot] = GetItemName(tempItem)\r\n        set Item_Description[shopSlot] = BlzGetItemDescription(tempItem)\r\n        \r\n        call RemoveItem(tempItem)\r\n        \r\n        set tempItem = null\r\n    endfunction\r\n    \r\n    private function FillRarityList takes ListInt rarities returns nothing\r\n    \tlocal integer i\r\n    \tlocal integer iMax\r\n    \tlocal integer k\r\n    \t\r\n    \tset k = 1\r\n    \tloop\r\n    \t\texitwhen k > 3\r\n    \t\tset i = 1\r\n    \t\tset iMax = StockAmount[k]\r\n\t    \tloop\r\n\t    \t\texitwhen i > iMax\r\n\t    \t\tcall rarities.Add(k)\r\n\t    \t\tset i = i + 1\r\n\t\t\tendloop\r\n    \t\tset k = k + 1\r\n\t\tendloop\r\n\t\t//call rarities.CheckData()\r\n\t\tcall rarities.Shuffle()\r\n\t\t//call rarities.CheckData()\r\n    endfunction\r\n    \r\n    private function SetNormalItemSlots takes integer slotsOpened returns nothing\r\n    \tlocal integer i\r\n    \tlocal integer itemRarity\r\n    \tlocal integer itemIndex\r\n    \tlocal integer k\r\n    \tlocal boolean resultCheck\r\n    \tlocal integer rarityMax\r\n    \tlocal integer itemId\r\n    \tlocal ListInt rarities = ListInt.create()\r\n    \r\n    \tcall FillRarityList(rarities)\r\n    \r\n    \tset i = 1\r\n        loop\r\n            exitwhen i > slotsOpened\r\n            if FutureItem[i] != 0 then\r\n\t            set ItemInSlot[i] = FutureItem[i]\r\n            else\r\n        \t\tset itemRarity = rarities.GetIntegerByIndex(i - 1)\r\n        \t\tset rarityMax = udg_Database_NumberItems[itemRarity]\r\n        \t\tset itemIndex = GetRandomInt(1, rarityMax)\r\n        \t\tset k = 1\r\n        \t\tloop\r\n\t        \t\tset itemId = DB_Items[itemRarity][itemIndex]\r\n\t                set resultCheck = IsItemExist(itemId, i) and udg_Dublicate == false\r\n\t                if resultCheck then\r\n\t                \tset itemIndex = itemIndex + 1\r\n\t                \tif itemIndex > rarityMax then\r\n\t                \t\tset itemIndex = 1\r\n\t                \tendif\r\n\t                endif\r\n\t                exitwhen resultCheck == false or k > 100\r\n\t                set k = k + 1\r\n                endloop\r\n                if k > 100 then\r\n                \tcall BJDebugMsg(\"Error! JuleLib_SetNormalItemSlots: k > 100!\")\r\n                endif\r\n                set ItemInSlot[i] = itemId\r\n            endif\r\n            set i = i + 1\r\n        endloop\r\n\r\n        call rarities.destroy()\r\n    endfunction\r\n    \r\n    //NOT USED RIGHT NOW\r\n    private function SetUnusualItemSlots takes integer slotsOpened returns nothing\r\n    \tlocal integer i\r\n    \tlocal integer k\r\n    \tlocal integer iEnd\r\n    \tlocal boolean resultCheck\r\n    \tlocal integer itemId\r\n    \tlocal integer itemIndex\r\n    \tlocal integer setMax\r\n    \tlocal integer rand\r\n    \r\n    \tif julenum < 5 then\r\n    \t\treturn\r\n\t\tendif\r\n\t\t\r\n        set i = 13\r\n        set iEnd = slotsOpened + julenum - 4\r\n        loop\r\n            exitwhen i > iEnd\r\n            if FutureItem[i] != 0 then\r\n            \tset ItemInSlot[i] = FutureItem[i]\r\n            else\r\n            \tset rand = GetRandomInt(1,9)\r\n            \tset setMax = udg_DB_SetItems_Num[rand]\r\n            \tset itemIndex = GetRandomInt(1, setMax)\r\n            \t\r\n                set k = 1\r\n                loop\r\n                    set itemId = DB_SetItems[rand][itemIndex]\r\n                    set resultCheck = IsItemExist(itemId, i) and udg_Dublicate == false\r\n                    if resultCheck then\r\n\t                \tset itemIndex = itemIndex + 1\r\n\t                \tif itemIndex > setMax then\r\n\t                \t\tset itemIndex = 1\r\n\t                \tendif\r\n                    endif\r\n                    exitwhen resultCheck == false or k > 100\r\n                    set k = k + 1\r\n                endloop\r\n                if k > 100 then\r\n                \tcall BJDebugMsg(\"Error! JuleLib_SetUnusualItemSlots: k > 100!\")\r\n                endif\r\n                set ItemInSlot[i] = itemId\r\n            endif\r\n            set i = i + 1\r\n        endloop\r\n\tendfunction\r\n\t\r\n    function JuleRef takes nothing returns nothing\r\n        local integer i\r\n        local integer iEnd\r\n        local integer k\r\n        local integer kEnd\r\n        local integer m\r\n        local integer slotsOpened = INITIAL_OPEN_SLOTS + julenum //IMinBJ(4,)\r\n        local integer array rarity\r\n        local integer rand\r\n        local integer array itemIndex\r\n        local boolean itemExist\r\n        local integer itemId\r\n        local integer itemCost\r\n        local integer loopBreak\r\n        local integer oldItemCost\r\n        local integer itemRarity\r\n        local integer shopSlot\r\n        local integer legrarity = R2I(udg_RarityChance[3]/2)\r\n        local string str\r\n        local real preCount\r\n        local boolean preCountBool\r\n        \r\n        call JulePause()\r\n        call DestroyEffect( AddSpecialEffect( \"Abilities\\\\Spells\\\\Human\\\\Polymorph\\\\PolyMorphDoneGround.mdl\", GetUnitX( udg_UNIT_JULE ), GetUnitY( udg_UNIT_JULE ) ) )\r\n        \r\n        set i = 1\r\n        loop\r\n            exitwhen i > slotsOpened\r\n            set ItemInSlot[i] = 0\r\n            set i = i + 1\r\n        endloop\r\n        \r\n        /*Set Item Rarity*/\r\n        call SetNormalItemSlots(slotsOpened)\r\n        \r\n        //call SetUnusualItemSlots(slotsOpened)\r\n        \r\n        set shopSlot = 0\r\n        set k = 1\r\n        set preCount = PreCount()\r\n        set preCountBool = preCount != 0\r\n        loop\r\n            exitwhen k > 4\r\n            set i = 1\r\n            loop\r\n                exitwhen i > 4\r\n                set shopSlot = shopSlot + 1\r\n                if ItemInSlot[shopSlot] != 0 then\r\n                    call SetShopSlot(shopSlot, i, k, preCount, preCountBool)\r\n                endif\r\n                set i = i + 1\r\n            endloop\r\n            set k = k + 1\r\n        endloop \r\n        \r\n        set i = 1\r\n        loop\r\n            exitwhen i > ITEMS_COUNT\r\n            set FutureItem[i] = 0\r\n            set FutureCost[i] = 0\r\n            set i = i + 1\r\n        endloop\r\n        \r\n        call AfterJuleRefresh.Invoke()\r\n    endfunction\r\n    \r\n    public function GetItemInSlot takes integer slot returns integer\r\n    \treturn ItemInSlot[slot]\r\n    endfunction\r\n    \r\n    public function GetCostInSlot takes integer slot returns integer\r\n    \treturn CostInSlot[slot]\r\n    endfunction\r\n    \r\n    public function SetFutureItem takes integer slot, integer itemId returns nothing\r\n    \tif slot < 1 or slot > ITEMS_COUNT then\r\n    \t\tcall BJDebugMsg(\"JuleLib - SetFutureItem: Error! Slot number out of slot range value! Current: \" + I2S(slot))\r\n    \t\treturn\r\n    \tendif\r\n    \tset FutureItem[slot] = itemId\r\n    endfunction\r\n    \r\n    public function SetFutureCost takes integer slot, integer newCost returns nothing\r\n    \tif slot < 1 or slot > ITEMS_COUNT then\r\n    \t\tcall BJDebugMsg(\"JuleLib - SetFutureCost: Error! Slot number out of slot range value! Current: \" + I2S(slot))\r\n    \t\treturn\r\n    \tendif\r\n    \tif newCost < 0 then\r\n    \t\tcall BJDebugMsg(\"JuleLib - SetFutureCost: Error! New cost less than 0! Current: \" + I2S(newCost))\r\n    \t\treturn\r\n    \tendif\r\n    \tset FutureCost[slot] = newCost\r\n    endfunction\r\n    \r\n    private function init takes nothing returns nothing\r\n    \tset StockAmount[3] = 1 //leg\r\n        set StockAmount[2] = 3 //rar\r\n        set StockAmount[1] = 4 //com\r\n        \r\n        set SlotStockIncrease[1] = 1\r\n        set SlotStockIncrease[2] = 2\r\n        set SlotStockIncrease[3] = 1\r\n        set SlotStockIncrease[4] = 2\r\n        set SlotStockIncrease[5] = 3\r\n        set SlotStockIncrease[6] = 1\r\n        set SlotStockIncrease[7] = 1\r\n        set SlotStockIncrease[8] = 2\r\n    endfunction\r\n\r\nendlibrary",
  "Events": [],
  "LocalVariables": [],
  "Conditions": [],
  "Actions": []
}