{
  "Id": 50332149,
  "Comment": "",
  "IsScript": true,
  "RunOnMapInit": false,
  "Script": "scope LoadSystem\r\n\r\n    function LoadProgress takes integer i, string str returns boolean\r\n        local integer cyclA = 1\r\n        local integer cyclAEnd\r\n        local integer cyclB\r\n        local integer cyclBEnd\r\n        local integer cyclC\r\n        local integer KeyInt = 0\r\n        local integer SumInt = 0\r\n        local integer ic\r\n        local integer str1\r\n        local integer str2\r\n        local string PrStr = \"\"\r\n        local string PrStr2 = \"\"\r\n        local string Char = \"\"\r\n        local string Char2 = \"\"\r\n        local string array EnNum\r\n        local string array TempStr\r\n        local string FinStr = null\r\n        local string EnStr\r\n        local string EnStr2\r\n        local string EnKey\r\n        local player p = Player(i-1)\r\n        local boolean loaded = false\r\n        \r\n        if str == \"\" then\r\n            set FinStr = StringCase(SubString(udg_LoadCode[i], 6, StringLength(udg_LoadCode[i])), true)\r\n        else\r\n            set FinStr = StringCase(SubString(str, 6, StringLength(str)), true)\r\n        endif\r\n        \r\n        if FinStr != null then\r\n            set EnStr = SubString(FinStr, 1, StringLength(FinStr) - 1)\r\n            set EnStr2 = SubString(FinStr, 1, StringLength(FinStr))\r\n            set EnKey = SubString(FinStr, 0, 1)\r\n\r\n            set cyclAEnd = udg_SaveLoadMaxCharacters\r\n            loop\r\n                exitwhen cyclA > cyclAEnd\r\n                set EnNum[cyclA - 1] = \"\"\r\n                set cyclA = cyclA + 1\r\n            endloop\r\n            set cyclA = 1\r\n            loop\r\n                exitwhen cyclA > 2\r\n                set TempStr[cyclA] = \"\"\r\n                set cyclA = cyclA + 1\r\n            endloop\r\n            set cyclA = 0\r\n            set cyclAEnd = udg_SaveLoadMaxCharacters - 1\r\n            loop\r\n                exitwhen cyclA > cyclAEnd\r\n                if EnKey == udg_SaveLoadCharacterNumbers[cyclA] then\r\n                    set KeyInt = cyclA\r\n                endif\r\n                set cyclA = cyclA + 1\r\n            endloop\r\n            set cyclA = 1\r\n            set cyclAEnd = udg_SaveLoadMaxCharacters\r\n            loop\r\n                exitwhen cyclA > cyclAEnd\r\n                set EnNum[cyclA - 1] = SubString(udg_SaveLoadEncryptionSet[KeyInt], cyclA - 1, cyclA)\r\n                set cyclA = cyclA + 1\r\n            endloop\r\n            set cyclA = 1\r\n            set cyclAEnd = StringLength(EnStr)\r\n            loop\r\n                exitwhen cyclA > cyclAEnd\r\n                set cyclB = 0\r\n                set cyclBEnd = udg_SaveLoadMaxCharacters - 1\r\n                loop\r\n                    exitwhen cyclB > cyclBEnd\r\n                    if SubString(EnStr, cyclA - 1, cyclA) == EnNum[cyclB] then\r\n                        set PrStr = PrStr + udg_SaveLoadCharacterNumbers[cyclB]\r\n                    endif\r\n                    set cyclB = cyclB + 1\r\n                endloop\r\n                set cyclA = cyclA + 1\r\n            endloop\r\n              \r\n            set cyclA = 1\r\n            set cyclAEnd = StringLength(EnStr2)\r\n            loop\r\n                exitwhen cyclA > cyclAEnd\r\n                set cyclB = 0\r\n                set cyclBEnd = udg_SaveLoadMaxCharacters - 1\r\n                loop\r\n                    exitwhen cyclB > cyclBEnd\r\n                    if SubString(EnStr2, cyclA - 1, cyclA) == EnNum[cyclB] then\r\n                        set PrStr2 = PrStr2 + udg_SaveLoadCharacterNumbers[cyclB]\r\n                    endif\r\n                    set cyclB = cyclB + 1\r\n                endloop\r\n                set cyclA = cyclA + 1\r\n            endloop\r\n            \r\n            set ic = StringLength(PrStr)\r\n            set Char = StringCase(SubString(PrStr, ic - 1, ic), true)  \r\n            set ic = StringLength(PrStr2)\r\n            set Char2 = StringCase(SubString(PrStr2, ic - 1, ic), true)\r\n            set PrStr = SubString(PrStr, 0, StringLength(PrStr) - 1 )\r\n\r\n            set cyclA = 1\r\n            set cyclAEnd = StringLength(PrStr)\r\n            loop\r\n                exitwhen cyclA > cyclAEnd\r\n                set cyclB = 0\r\n                set cyclBEnd = udg_SaveLoadMaxCharacters - 1\r\n                loop\r\n                    exitwhen cyclB > cyclBEnd\r\n                    if SubString(PrStr, cyclA - 1, cyclA) == udg_SaveLoadCharacterNumbers[cyclB] then\r\n                        set SumInt = SumInt + cyclB\r\n                    endif\r\n                    set cyclB = cyclB + 1\r\n                endloop\r\n                set cyclA = cyclA + 1\r\n            endloop\r\n\r\n            set str1 = SumInt - ( ( SumInt / udg_SaveLoadMaxCharacters ) * udg_SaveLoadMaxCharacters )\r\n            set SumInt = StringLength(GetPlayerName( p ))\r\n            set cyclA = 1\r\n            loop\r\n                exitwhen cyclA > 2\r\n                set cyclB = 1\r\n                set cyclBEnd = udg_SaveLoadMaxCharacters\r\n                loop\r\n                    exitwhen cyclB > cyclBEnd\r\n                    if SubString(GetPlayerName(p), cyclA - 1, cyclA) == SubString((udg_SaveLoadEncryptionSet[1]), cyclB - 1, cyclB) then\r\n                        set SumInt = SumInt + cyclB\r\n                    endif\r\n                    set cyclB = cyclB + 1\r\n                endloop\r\n                set cyclA = cyclA + 1\r\n            endloop\r\n            set str2 = SumInt - ( ( SumInt / udg_SaveLoadMaxCharacters ) * udg_SaveLoadMaxCharacters )\r\n\r\n            if Char2 != udg_SaveLoadCharacterNumbers[str2] or Char != udg_SaveLoadCharacterNumbers[str1] then\r\n                if Char != null then\r\n                    call DisplayTimedTextToPlayer(p, 0, 0, 15, \"|cffff0000Warning!|r Your save file is damaged, did not load or you are playing with a different nickname.\")\r\n                    call DisplayTimedTextToPlayer(p, 0, 0, 15, \"Please use the \\\"-autoload\\\" command, backup file or contact the developer.\")\r\n                endif\r\n            elseif not( udg_SaveLoadHasLoaded[i]) then\r\n                set ic = 1\r\n                set cyclC = 1\r\n                loop\r\n                    exitwhen cyclC > 2\r\n                    set TempStr[cyclC] = SubString(PrStr, ic - 1, ic + udg_SaveLoadSlots[cyclC] - 1 )\r\n                    set ic = ic + udg_SaveLoadSlots[cyclC]\r\n                    set cyclC = cyclC + 1\r\n                endloop\r\n                \r\n                set cyclC = 1\r\n                loop\r\n                    exitwhen cyclC > 2\r\n                    set udg_SaveLoadMultiple = 0\r\n                    set cyclA = 1\r\n                    set cyclAEnd = udg_SaveLoadSlots[cyclC]\r\n                    loop\r\n                        exitwhen cyclA > cyclAEnd\r\n                        set udg_SaveLoadPowerOfMaxNumber = 1\r\n                        set cyclB = cyclA\r\n                        set cyclBEnd = udg_SaveLoadSlots[cyclC] - 1\r\n                        loop\r\n                            exitwhen cyclB > cyclBEnd\r\n                            set udg_SaveLoadPowerOfMaxNumber = udg_SaveLoadPowerOfMaxNumber * udg_SaveLoadMaxCharacters\r\n                            set cyclB = cyclB + 1\r\n                        endloop\r\n                        set cyclB = 0\r\n                        set cyclBEnd = udg_SaveLoadMaxCharacters - 1\r\n                        loop\r\n                            exitwhen cyclB > cyclBEnd\r\n                            if SubString(TempStr[cyclC], cyclA - 1, cyclA) == udg_SaveLoadCharacterNumbers[cyclB] then\r\n                                set udg_SaveLoadMultiple = udg_SaveLoadMultiple + ( cyclB * udg_SaveLoadPowerOfMaxNumber )\r\n                            endif\r\n                            set cyclB = cyclB + 1\r\n                        endloop\r\n                        set cyclA = cyclA + 1\r\n                    endloop\r\n                    if cyclC == 1 then\r\n                        set udg_Exp[i] = udg_SaveLoadMultiple\r\n                    elseif cyclC == 2 then\r\n                        set udg_LvL[i] = udg_SaveLoadMultiple\r\n                    endif\r\n                    set cyclC = cyclC + 1\r\n                endloop\r\n\r\n                if udg_LvL[i] > 100 then\r\n                    set udg_LvL[i] = 1\r\n                    set udg_Exp[i] = 0\r\n                endif\r\n\r\n                set udg_SaveLoadHasLoaded[cyclA] = false\r\n                call DisplayTimedTextToPlayer(p, 0, 0, 10, \"Welcome!\")\r\n                call DisplayTimedTextToPlayer(p, 0, 0, 10, \"|cffffcc00Level:|r \" + I2S( udg_LvL[i] ) )\r\n                call DisplayTimedTextToPlayer(p, 0, 0, 10, \"|cffffcc00Experience:|r \" + I2S( udg_Exp[i] ) )\r\n                set loaded = true\r\n            else\r\n                call DisplayTimedTextToPlayer(p, 0, 0, 10, \"The saves have already been loaded.\")\r\n            endif\r\n        endif\r\n           \r\n        set p = null\r\n        return loaded\r\n    endfunction\r\n    \r\n    function BonusLoadModule takes nothing returns nothing\r\n        local integer cyclA = 1\r\n        local integer j\r\n        \r\n        set cyclA = 1\r\n        loop\r\n            exitwhen cyclA > 4\r\n            if GetPlayerSlotState( Player( cyclA - 1 ) ) == PLAYER_SLOT_STATE_PLAYING and not(udg_AlreadyLoaded[cyclA]) and udg_LvL[cyclA] > 1 then\r\n                set j = cyclA + 4\r\n                set udg_AlreadyLoaded[cyclA] = true\r\n                if udg_LvL[cyclA] >= 2 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[2] )\r\n                endif\r\n                if udg_LvL[cyclA] >= 3 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[3] )\r\n                endif\r\n                if udg_LvL[cyclA] >= 4 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[4] )\r\n                endif\r\n                if udg_LvL[cyclA] >= 5 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[5] )\r\n                    set udg_logic[cyclA + 90] = true\r\n                endif\r\n                if udg_LvL[cyclA] >= 11 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[11] )\r\n                elseif udg_LvL[cyclA] >= 8 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[8] )\r\n                elseif udg_LvL[cyclA] >= 6 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[6] )\r\n                endif\r\n                if udg_LvL[cyclA] >= 14 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[14] )\r\n                    set udg_rollbase[cyclA] = udg_rollbase[cyclA] + 2\r\n                elseif udg_LvL[cyclA] >= 7 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[7] )\r\n                    set udg_rollbase[cyclA] = udg_rollbase[cyclA] + 1\r\n                endif\r\n                if udg_LvL[cyclA] >= 9 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[9] )\r\n                endif\r\n                if udg_LvL[cyclA] >= 10 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[10] )\r\n                endif\r\n                if udg_LvL[cyclA] >= 12 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[12] )\r\n                    call SetRaritySpawn(udg_RarityChance[3] + 1, udg_RarityChance[2] + 1)\r\n                endif\r\n                if udg_LvL[cyclA] >= 13 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[13] )\r\n                endif\r\n                if udg_LvL[cyclA] >= 15 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[15] )\r\n                endif\r\n                if udg_LvL[cyclA] >= 20 then\r\n                    call UnitAddAbility( udg_unit[j], udg_ExpBonuses[20] )\r\n                endif\r\n            endif\r\n            set cyclA = cyclA + 1\r\n        endloop\r\n    endfunction\r\n\r\n    function ItemLoadModule takes nothing returns nothing\r\n        local integer cyclA\r\n        local integer cyclAEnd\r\n        \r\n        if udg_UntilFirstFight then\r\n            if AnyHasLvL(6) and not(udg_logic[48]) then\r\n                set udg_logic[48] = true\r\n                set cyclA = 1\r\n                set cyclAEnd = udg_DB_NumLvLItems[1]\r\n                loop\r\n                    exitwhen cyclA > cyclAEnd\r\n                    set DB_Items[1][udg_Database_NumberItems[1]+cyclA] = udg_DB_Item_ForLvL1_Common[cyclA]\r\n                    set cyclA = cyclA + 1\r\n                endloop\r\n                set udg_Database_NumberItems[1] = udg_Database_NumberItems[1] + udg_DB_NumLvLItems[1]\r\n                \r\n                set cyclA = 1\r\n                set cyclAEnd = udg_DB_NumLvLItems[4]\r\n                loop\r\n                    exitwhen cyclA > cyclAEnd\r\n                    set DB_Items[2][udg_Database_NumberItems[2]+cyclA] = udg_DB_Item_ForLvL1_Rare[cyclA]\r\n                    set cyclA = cyclA + 1\r\n                endloop\r\n                set udg_Database_NumberItems[2] = udg_Database_NumberItems[2] + udg_DB_NumLvLItems[4]\r\n                \r\n                set cyclA = 1\r\n                set cyclAEnd = udg_DB_NumLvLItems[7]\r\n                loop\r\n                    exitwhen cyclA > cyclAEnd\r\n                    set DB_Items[3][udg_Database_NumberItems[3]+cyclA] = udg_DB_Item_ForLvL1_Legendary[cyclA]\r\n                    set cyclA = cyclA + 1\r\n                endloop\r\n                set udg_Database_NumberItems[3] = udg_Database_NumberItems[3] + udg_DB_NumLvLItems[7]\r\n            endif\r\n            \r\n            if AnyHasLvL(8) and not(udg_logic[49]) then\r\n                set udg_logic[49] = true\r\n                set cyclA = 1\r\n                set cyclAEnd = udg_DB_NumLvLItems[2]\r\n                loop\r\n                    exitwhen cyclA > cyclAEnd\r\n                    set DB_Items[1][udg_Database_NumberItems[1]+cyclA] = udg_DB_Item_ForLvL2_Common[cyclA]\r\n                    set cyclA = cyclA + 1\r\n                endloop\r\n                set udg_Database_NumberItems[1] = udg_Database_NumberItems[1] + udg_DB_NumLvLItems[2]\r\n                \r\n                set cyclA = 1\r\n                set cyclAEnd = udg_DB_NumLvLItems[5]\r\n                loop\r\n                    exitwhen cyclA > cyclAEnd\r\n                    set DB_Items[2][udg_Database_NumberItems[2]+cyclA] = udg_DB_Item_ForLvL2_Rare[cyclA]\r\n                    set cyclA = cyclA + 1\r\n                endloop\r\n                set udg_Database_NumberItems[2] = udg_Database_NumberItems[2] + udg_DB_NumLvLItems[5]\r\n                \r\n                set cyclA = 1\r\n                set cyclAEnd = udg_DB_NumLvLItems[8]\r\n                loop\r\n                    exitwhen cyclA > cyclAEnd\r\n                    set DB_Items[3][udg_Database_NumberItems[3]+cyclA] = udg_DB_Item_ForLvL2_Legendary[cyclA]\r\n                    set cyclA = cyclA + 1\r\n                endloop\r\n                set udg_Database_NumberItems[3] = udg_Database_NumberItems[3] + udg_DB_NumLvLItems[8]\r\n            endif\r\n            \r\n            if AnyHasLvL(11) and not(udg_logic[50]) then\r\n                set udg_logic[50] = true\r\n                set cyclA = 1\r\n                set cyclAEnd = udg_DB_NumLvLItems[3]\r\n                loop\r\n                    exitwhen cyclA > cyclAEnd\r\n                    set DB_Items[1][udg_Database_NumberItems[1]+cyclA] = udg_DB_Item_ForLvL3_Common[cyclA]\r\n                    set cyclA = cyclA + 1\r\n                endloop\r\n                set udg_Database_NumberItems[1] = udg_Database_NumberItems[1] + udg_DB_NumLvLItems[3]\r\n                \r\n                set cyclA = 1\r\n                set cyclAEnd = udg_DB_NumLvLItems[6]\r\n                loop\r\n                    exitwhen cyclA > cyclAEnd\r\n                    set DB_Items[2][udg_Database_NumberItems[2]+cyclA] = udg_DB_Item_ForLvL3_Rare[cyclA]\r\n                    set cyclA = cyclA + 1\r\n                endloop\r\n                set udg_Database_NumberItems[2] = udg_Database_NumberItems[2] + udg_DB_NumLvLItems[6]\r\n                \r\n                set cyclA = 1\r\n                set cyclAEnd = udg_DB_NumLvLItems[9]\r\n                loop\r\n                    exitwhen cyclA > cyclAEnd\r\n                    set DB_Items[3][udg_Database_NumberItems[3]+cyclA] = udg_DB_Item_ForLvL3_Legendary[cyclA]\r\n                    set cyclA = cyclA + 1\r\n                endloop\r\n                set udg_Database_NumberItems[3] = udg_Database_NumberItems[3] + udg_DB_NumLvLItems[9]\r\n            endif\r\n        endif\r\n    endfunction\r\n    \r\n    function BonusLoad takes integer i returns nothing\r\n        call BonusLoadModule()\r\n        call ItemLoadModule()\r\n\r\n        call HeroesTable_SetLevelNumberFrame(Player(i - 1), udg_LvL[i] )\r\n        \r\n        if AnyHasLvL(3) then\r\n            call ShowUnit( udg_UNIT_JULE, true )\r\n        endif\r\n        if AnyHasLvL(4) then\r\n            call ShowUnit( udg_UNIT_QUARTERMASTER, true )\r\n        endif\r\n        if AnyHasLvL(5) then\r\n            call ShowUnit(udg_UNIT_MAGIC_TRANSFORMER, true)\r\n        endif\r\n        if AnyHasLvL(5) then\r\n            set udg_logic[89] = false\r\n            set udg_logic[i + 90] = true\r\n        endif\r\n    endfunction\r\n\r\n    private function LoadTrySecond takes nothing returns nothing\r\n        local integer id = GetHandleId( GetExpiredTimer() )\r\n        local integer i = LoadInteger( udg_hash, id, StringHash( \"load\" ) )\r\n        local boolean isLoaded = false\r\n        \r\n        set isLoaded = LoadProgress( i, \"\" )\r\n        if isLoaded then\r\n            call BonusLoad(i)\r\n        endif\r\n        \r\n    endfunction\r\n\r\n    private function LoadTry takes nothing returns nothing\r\n        local integer id = GetHandleId( GetExpiredTimer() )\r\n        local integer id1\r\n        local integer i = LoadInteger( udg_hash, id, StringHash( \"load\" ) )\r\n        local player pl = LoadPlayerHandle(udg_hash, id, StringHash( \"load\" ) )\r\n        local boolean isLoaded = false\r\n    \r\n        set isLoaded = LoadProgress( i, \"\" )\r\n        if isLoaded then\r\n            call BonusLoad(i)\r\n        else\r\n            set id1 = GetHandleId( pl )\r\n            if LoadTimerHandle( udg_hash, id1, StringHash( \"load\" ) ) == null then\r\n                call SaveTimerHandle( udg_hash, id1, StringHash( \"load\" ), CreateTimer() )\r\n            endif\r\n            set id = GetHandleId( LoadTimerHandle( udg_hash, id1, StringHash( \"load\" ) ) ) \r\n            call SavePlayerHandle( udg_hash, id1, StringHash( \"load\" ), pl )\r\n            call SaveInteger( udg_hash, id1, StringHash( \"load\" ), i )\r\n            call TimerStart( LoadTimerHandle( udg_hash, GetHandleId( pl ), StringHash( \"load\" ) ), 0.5, false, function LoadTrySecond )\r\n        endif\r\n    \r\n        set pl = null\r\n    endfunction\r\n\r\n    private function TryLoadAgain takes player pl, integer playerIndex returns nothing\r\n        local integer id = GetHandleId( pl )\r\n        \r\n        if LoadTimerHandle( udg_hash, id, StringHash( \"load\" ) ) == null then\r\n            call SaveTimerHandle( udg_hash, id, StringHash( \"load\" ), CreateTimer() )\r\n        endif\r\n        set id = GetHandleId( LoadTimerHandle( udg_hash, id, StringHash( \"load\" ) ) ) \r\n        call SavePlayerHandle( udg_hash, id, StringHash( \"load\" ), pl )\r\n        call SaveInteger( udg_hash, id, StringHash( \"load\" ), playerIndex )\r\n        call TimerStart( LoadTimerHandle( udg_hash, GetHandleId( pl ), StringHash( \"load\" ) ), 0.5, false, function LoadTry )\r\n    \r\n        set pl = null\r\n    endfunction\r\n\r\n    function Trig_LoadModuleSingle_Actions takes nothing returns nothing\r\n        local integer cyclA = 1\r\n        local boolean isLoaded\r\n        local player pl\r\n\r\n        loop\r\n            exitwhen cyclA > 4\r\n            set pl = Player( cyclA - 1 )\r\n            if GetPlayerSlotState( pl ) == PLAYER_SLOT_STATE_PLAYING then\r\n                set isLoaded = LoadProgress( cyclA, \"\" )\r\n                call HeroesTable_SetLevelNumberFrame(pl, udg_LvL[cyclA] )\r\n                if isLoaded == false then\r\n                    call TryLoadAgain(pl, cyclA)\r\n                endif\r\n            endif\r\n            set cyclA = cyclA + 1\r\n        endloop\r\n        \r\n        call BonusLoadModule()\r\n        call ItemLoadModule()\r\n        \r\n        set pl = null\r\n    endfunction\r\n\r\n    //===========================================================================\r\n    function InitTrig_LoadModuleSingle takes nothing returns nothing\r\n        set gg_trg_LoadModuleSingle = CreateTrigger(  )\r\n        call TriggerRegisterTimerEvent(gg_trg_LoadModuleSingle, 1.5, false)\r\n        call TriggerAddAction( gg_trg_LoadModuleSingle, function Trig_LoadModuleSingle_Actions )\r\n    endfunction\r\n\r\nendscope",
  "Events": [],
  "LocalVariables": [],
  "Conditions": [],
  "Actions": []
}