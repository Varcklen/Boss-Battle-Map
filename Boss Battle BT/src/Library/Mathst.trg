{
  "Id": 50332059,
  "Comment": "",
  "IsScript": true,
  "RunOnMapInit": false,
  "Script": "library Math //initializer init\r\n\r\n    /*public struct point\r\n        real x\r\n        real y\r\n        \r\n        method Set takes real x, real y returns nothing\r\n            set .x = x\r\n            set .y = y\r\n        endmethod\r\n        \r\n        method SetFromPoint takes point p returns nothing\r\n            set .x = p.x\r\n            set .y = p.y\r\n            call p.destroy()\r\n        endmethod\r\n    endstruct\r\n\r\n    globals\r\n        private point Point\r\n    endglobals\r\n*/\r\n    function AngleBetweenUnits takes unit a, unit b returns real\r\n        return bj_RADTODEG * Atan2(GetUnitY(a) - GetUnitY(b), GetUnitX(a) - GetUnitX(b))\r\n    endfunction\r\n    \r\n    /*function GetAngleBetweenPoints takes point a, point b returns real\r\n        local real r = bj_RADTODEG * Atan2(a.y - b.y, a.x - b.x)\r\n        call a.destroy()\r\n        call b.destroy()\r\n        return r\r\n    endfunction*/\r\n\r\n    function DistanceBetweenUnits takes unit u, unit n returns real\r\n        local real dx = GetUnitX(u) - GetUnitX(n)\r\n        local real dy = GetUnitY(u) - GetUnitY(n)\r\n        return SquareRoot(dx * dx + dy * dy)\r\n    endfunction\r\n\r\n    /*function DistanceBetweenCustomPoints takes point a, point b returns real\r\n        local real dx = a.x - b.x\r\n        local real dy = a.y - b.y\r\n        //call a.destroy()\r\n        //call b.destroy()\r\n        return SquareRoot(dx * dx + dy * dy)\r\n    endfunction*/\r\n\r\n    function MoveLightningUnits takes lightning l, unit u, unit n returns nothing\r\n        call MoveLightningEx(l, true, GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), GetUnitX(n), GetUnitY(n), GetUnitFlyHeight(n))\r\n    endfunction\r\n\r\n    function SpecialEffectAngle takes string str, real angle, real x, real y returns nothing\r\n        local effect fx = AddSpecialEffect(str, x, y )\r\n        call BlzSetSpecialEffectYaw( fx, angle*3.14/180 )\r\n        call DestroyEffect( fx )\r\n        set fx = null\r\n    endfunction\r\n\r\n    /*function GetMovedPointBetweenUnits takes unit unitWho, unit unitTo, real distance returns point\r\n    \tlocal real unitWhoX = GetUnitX( unitWho )\r\n    \tlocal real unitWhoY = GetUnitY( unitWho )\r\n    \tlocal real unitToX = GetUnitX( unitTo )\r\n    \tlocal real unitToY = GetUnitY( unitTo )\r\n        local real angle = Atan2( unitToY - unitWhoY, unitToX - unitWhoX )\r\n        \r\n        set Point.x = unitWhoX + distance * Cos( angle )\r\n        set Point.y = unitWhoY + distance * Sin( angle )\r\n        return Point\r\n    endfunction*/\r\n    \r\n    /*function GetMovedPointBetweenPoints takes point pointOne, point pointTwo, real distance returns point\r\n    \tlocal real x1 = pointOne.x\r\n    \tlocal real y1 = pointOne.y\r\n    \tlocal real x2 = pointTwo.x\r\n    \tlocal real y2 = pointTwo.y\r\n        local real angle = Atan2( y2 - y1, x2 - x1 )\r\n        \r\n        set Point.x = x1 + distance * Cos( angle )\r\n        set Point.y = y1 + distance * Sin( angle )\r\n        call BJDebugMsg(\"GetMovedPointBetweenPoints\")\r\n        call BJDebugMsg(\"x: \" + R2S(Point.x))\r\n        call BJDebugMsg(\"y: \" + R2S(Point.y))\r\n        return Point\r\n    endfunction*/\r\n    \r\n    /*function GetUnitPoint takes unit unitUsed returns point\r\n    \tlocal point pointUsed = point.create()\r\n        set pointUsed.x = GetUnitX( unitUsed )\r\n        set pointUsed.y = GetUnitY( unitUsed )\r\n        \r\n        call BJDebugMsg(\"GetUnitPoint\")\r\n        call BJDebugMsg(\"x: \" + R2S(Point.x))\r\n        call BJDebugMsg(\"y: \" + R2S(Point.y))\r\n        return pointUsed\r\n    endfunction*/\r\n\r\n    /*function GetMovedLocationBetweenLocation takes location loc1, location loc2, real distance returns location\r\n        local real angle = Atan2( GetLocationY( loc2 ) - GetLocationY( loc1 ), GetLocationX( loc2 ) - GetLocationX( loc1 ) )\r\n        local real NewX = GetLocationX( loc1 ) + distance * Cos( angle )\r\n        local real NewY = GetLocationY( loc1 ) + distance * Sin( angle )\r\n        set loc = Location(NewX, NewY)\r\n        set loc1 = null\r\n        set loc2 = null\r\n        return loc\r\n    endfunction*/\r\n\r\n    public function Split takes integer i returns integer\r\n        return R2I((i+1)/2)\r\n    endfunction\r\n    \r\n    public function IsNumberInteger takes real r returns boolean\r\n        //call BJDebugMsg(\"Check r: \" + R2S(r) )\r\n        //call BJDebugMsg(\"Check i: \" + I2S(R2I(r)) )\r\n        return R2I(r) == r\r\n    endfunction\r\n\r\n    public function GetUnitRandomX takes unit whichUnit, real scatter returns real\r\n        return GetUnitX(whichUnit) + GetRandomReal(-scatter, scatter)\r\n    endfunction\r\n\r\n    public function GetUnitRandomY takes unit whichUnit, real scatter returns real\r\n        return GetUnitY(whichUnit) + GetRandomReal(-scatter, scatter)\r\n    endfunction\r\n    \r\n    public function GetRandomPoint takes real x, real scatter returns real\r\n        return x + GetRandomReal(-scatter, scatter)\r\n    endfunction\r\n    \r\n    public function GetRandomX takes real x, real scatter returns real\r\n        return x + GetRandomReal(-scatter, scatter)\r\n    endfunction\r\n\r\n    public function GetRandomY takes real y, real scatter returns real\r\n        return y + GetRandomReal(-scatter, scatter)\r\n    endfunction\r\n    \r\n    /*function GetRandomPointInRect takes rect whichRect returns point\r\n        set Point.x = GetRandomReal(GetRectMinX(whichRect), GetRectMaxX(whichRect))\r\n        set Point.y = GetRandomReal(GetRectMinY(whichRect), GetRectMaxY(whichRect))\r\n        set whichRect = null\r\n        return Point\r\n    endfunction*/\r\n    \r\n    /*function GetMovedPoint takes effect wave, real yaw, real distance returns point\r\n        set Point.x = BlzGetLocalSpecialEffectX( wave ) + distance * Cos( yaw )\r\n        set Point.y = BlzGetLocalSpecialEffectY( wave ) + distance * Sin( yaw )\r\n        set wave = null\r\n        return Point\r\n    endfunction*/\r\n    \r\n    /*function GetMovedPointByPoint takes point p, real yaw, real distance returns point\r\n        set Point.x = p.x + distance * Cos( yaw )\r\n        set Point.y = p.y + distance * Sin( yaw )\r\n        call p.destroy()\r\n        return Point\r\n    endfunction*/\r\n    \r\n    /*private function init takes nothing returns nothing\r\n        set Point = point.create()\r\n    endfunction*/\r\nendlibrary",
  "Events": [],
  "LocalVariables": [],
  "Conditions": [],
  "Actions": []
}